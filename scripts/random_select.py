import random

methods = [
    "Base64$Encoder Base64.getEncoder()",
    "ConfigurableApplicationContext SpringApplication.run(Class,String[])",
    "ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)",
    "Document Jsoup.parse(String)",
    "Elements Element.select(String)",
    "Elements Elements.select(String)",
    "Enumeration ZipFile.entries()",
    "File File.createTempFile(String,String)",
    "File[] File.listFiles()",
    "GuideContentResource GuideRenderer.render(GuideType,String)",
    "GuideResource GuideResourceAssembler.toResource(Repository)",
    "GuideType GuideType.fromName(String)",
    "GuideType GuideType.fromRepositoryName(String)",
    "GuideType GuideType.fromSlug(String)",
    "HttpHeaders HttpEntity.getHeaders()",
    "InputStream ZipFile.getInputStream(ZipEntry)",
    "Link LinkBuilderSupport.withRel(String)",
    "Link LinkBuilderSupport.withSelfRel()",
    "LinkRenderer$Rendering LinkRenderer$Rendering.withAttribute(String,String)",
    "LinkRenderer$Rendering MarkdownToHtmlSerializer.createAnchorLink(String)",
    "List Arrays.asList(Object[])",
    "List GithubClient.fetchOrgRepositories(String)",
    "List HttpHeaders.get(Object)",
    "List ResourceAssemblerSupport.toResources(Iterable)",
    "Object Enumeration.nextElement()",
    "Object HttpEntity.getBody()",
    "Object Iterator.next()",
    "Object Optional.get()",
    "Object RestTemplate.getForObject(String,Class,Object[])",
    "Object Stream.collect(Collector)",
    "Optional Optional.of(Object)",
    "Optional Stream.findFirst()",
    "OptionsBuilder OptionsBuilder.attributes(Attributes)",
    "OptionsBuilder OptionsBuilder.baseDir(File)",
    "OptionsBuilder OptionsBuilder.headerFooter(boolean)",
    "Printer Printer.print(String)",
    "Printer Printer.print(char)",
    "Printer Printer.printEncoded(String)",
    "Printer Printer.println()",
    "Repository GithubClient.fetchOrgRepository(String,String)",
    "ResourceSupport IndexController.index()",
    "Resources GuidesController.listGuides()",
    "ResponseEntity GuidesController.renderGuide(String,String)",
    "ResponseEntity GuidesController.showGuide(String,String)",
    "ResponseEntity MarkupController.renderMarkup(MediaType,String)",
    "ResponseEntity ResponseEntity.ok(Object)",
    "ResponseEntity RestTemplate.getForEntity(String,Class,Object[])",
    "Stream Collection.stream()",
    "Stream Stream.filter(Predicate)",
    "Stream Stream.map(Function)",
    "String AsciidoctorGuideContentContributor.findTableOfContents(Document)",
    "String Base64$Encoder.encodeToString(byte[])",
    "String Elements.html()",
    "String Elements.toString()",
    "String File.getAbsolutePath()",
    "String File.getName()",
    "String File.getParent()",
    "String FileCopyUtils.copyToString(Reader)",
    "String GuideType.stripPrefix(String)",
    "String String.concat(String)",
    "String String.format(String,Object[])",
    "String String.replace(CharSequence,CharSequence)",
    "String String.replaceAll(String,String)",
    "String String.replaceFirst(String,String)",
    "String String.substring(int)",
    "String String.toLowerCase()",
    "String StringBuilder.toString()",
    "String StringUtils.arrayToDelimitedString(Object[],String)",
    "String StringWriter.toString()",
    "String TextNode.getText()",
    "String ToHtmlSerializer.printChildrenToString(SuperNode)",
    "String VerbatimNode.getType()",
    "String ZipEntry.getName()",
    "StringBuilder StringBuilder.append(String)",
    "StringBuilder StringBuilder.append(int)",
    "String[] StringUtils.tokenizeToStringArray(String,String)",
    "boolean ArrayList.add(Object)",
    "boolean ArrayList.addAll(Collection)",
    "boolean Enumeration.hasMoreElements()",
    "boolean File.exists()",
    "boolean File.isDirectory()",
    "boolean File.isFile()",
    "boolean File.mkdir()",
    "boolean FileSystemUtils.deleteRecursively(File)",
    "boolean Iterator.hasNext()",
    "boolean Optional.isPresent()",
    "boolean StringUtils.isEmpty(String)",
    "boolean ZipEntry.isDirectory()",
    "byte[] FileCopyUtils.copyToByteArray(File)",
    "byte[] GithubClient.downloadRepositoryAsZipball(String,String)",
    "char String.charAt(int)",
    "int HeaderNode.getLevel()",
    "int StreamUtils.copy(InputStream,OutputStream)",
    "void ArrayList.forEach(Consumer)",
    "void Asciidoctor.convert(Reader,Writer,OptionsBuilder)",
    "void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)",
    "void Attributes.setAllowUriRead(boolean)",
    "void Attributes.setSkipFrontMatter(boolean)",
    "void File.deleteOnExit()",
    "void FileOutputStream.close()",
    "void FileOutputStream.write(byte[])",
    "void ImagesGuideContentContributor.contribute(GuideContentResource,File)",
    "void MarkdownToHtmlSerializer.visit(HeaderNode)",
    "void PrettifyVerbatimSerializer.serialize(VerbatimNode,Printer)",
    "void PwsGuideContentContributor.contribute(GuideContentResource,File)",
    "void ResourceSupport.add(Link)",
    "void ToHtmlSerializer.printLink(LinkRenderer$Rendering)",
    "void ToHtmlSerializer.visitChildren(SuperNode)",
    "void ZipFile.close()",
]

print(random.sample(methods, 19))
