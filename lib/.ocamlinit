let root =
  let rec search path =
    match Sys.file_exists (path ^ "/.ocamlinit") with
    | false ->
        search (Filename.dirname path)
    | true ->
        path
  in
  search (Sys.getcwd ())
in
Sys.chdir root
;;

#use "topfind"

#require "core"

#require "ocamlgraph"

#require "yojson"

(* #directory "_build";; *)

module List = Core_kernel.List
module Option = Core_kernel.Option
module In_channel = Core_kernel.In_channel
module Out_channel = Core_kernel.Out_channel
module String = Core_kernel.String
module Int = Core_kernel.Int
module Float = Core_kernel.Float
module Array = Core_kernel.Array
open Core
open InferenceEngineLib
open GraphRepr
open DataFlowEdges
open ListMonad
open InfixOperators
open ContextualFeatures
open SimilarityHandler
open Loop
open RulesOfInference
open NodeWiseFeatures
open Yojson.Basic
open DirectoryManager
open Chain
open Method
open GraphSplitter
open Annotations
open Trunk
module Json = Yojson.Basic

exception End

let fst3 (a, b, c) = a

let snd3 (a, b, c) = b

let trd3 (a, b, c) = c

type json = Json.t

let json = Deserializer.deserialize_json ()

let received_responses = []

let () = Sys.chdir ".."

let () = print_endline @@ Format.asprintf "Utop is spawned on %s" @@ Sys.getcwd ()

let df_edges_added =
  match graph_already_serialized ~comp_unit:"" ~suffix:"df_edges" with
  | None ->
      let result = G.empty |> batch_add_vertex json |> batch_add_edge json in
      G.serialize_to_bin result ~suffix:"df_edges" ;
      result
  | Some filename ->
      Deserializer.deserialize_graph filename


let splitted = split_graph_by_comp_unit df_edges_added

let renderer_graph = List.nth_exn splitted 0

let site_graph = List.nth_exn splitted 1
