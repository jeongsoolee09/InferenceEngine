type solution = Method.t * string list

let sagan_udf_solution : solution array =
  [| ("String SpringToolsController.listDownloads(Model)", ["src"; "sin"])
   ; ("String SpringToolsAdminController.save(SpringToolsPlatform,List)", ["src"; "sin"])
   ; ("String SpringToolsAdminController.edit(String,Model)", ["src"])
   ; ("String SpringToolsAdminController.edit(SpringToolsPlatform,Model)", ["sin"])
   ; ("String SpringToolsAdminController.newPlatform(Model)", ["src"])
   ; ("String SpringToolsAdminController.delete(String)", ["src"; "sin"])
   ; ("String SpringToolsAdminController.list(Model)", ["src"; "sin"])
   ; ("String SpringToolsPlatform.getId()", ["non"])
   ; ("void SpringToolsPlatform.setId(String)", ["non"])
   ; ("void SpringToolsPlatform.setDownloads(List)", ["non"])
   ; ("String SpringToolsPlatform.toString()", ["non"])
   ; ("List SpringToolsPlatform.getDownloads()", ["non"])
   ; ("String SpringToolsDownload.getLabel()", ["non"])
   ; ("String SpringToolsDownload.getVariant()", ["non"])
   ; ("void SpringToolsDownload.setDownloadUrl(String)", ["non"])
   ; ("void SpringToolsDownload.setVariant(String)", ["non"])
   ; ("void SpringToolsDownload.setLabel(String)", ["non"])
   ; ("String SpringToolsDownload.toString()", ["non"])
   ; ("String SpringToolsDownload.getDownloadUrl()", ["non"])
   ; ("void TeamService.updateAvatarUrlwithGravatar(MemberProfile)", ["non"])
   ; ("MemberProfile TeamService.fetchMemberProfile(Long)", ["non"])
   ; ("MemberProfile TeamService.createOrUpdateMemberProfile(Long,String,String,String)", ["non"])
   ; ("void TeamService.updateMemberProfile(String,MemberProfile)", ["non"])
   ; ("void TeamService.updateMemberProfile(MemberProfile,MemberProfile)", ["non"])
   ; ("void TeamService.updateMemberProfile(Long,MemberProfile)", ["non"])
   ; ("MemberProfile TeamService.fetchMemberProfileUsername(String)", ["non"])
   ; ("List TeamService.fetchActiveMembers()", ["non"])
   ; ("List TeamService.fetchHiddenMembers()", ["non"])
   ; ("void TeamService.showOnlyTeamMembersWithIds(List)", ["non"])
   ; ("String TeamController.showProfile(String,Model)", ["src"; "sin"])
   ; ("String TeamController.showTeam(Model)", ["src"; "sin"])
   ; ("String Tea(* mAdminController.editTeamMemberForm(String,Model)", ["src"; "sin"])
   ; ("String TeamAdminController.saveTeamMember(String,MemberProfile)", ["src"; "sin"])
   ; ("GitHub TeamAdminController.getGitHub(Principal)", ["non"])
   ; ("String TeamAdminController.saveProfile(Principal,MemberProfile)", ["src"; "sin"])
   ; ("String TeamAdminController.importTeamMembersFromGithub(Principal)", ["src"; "sin"])
   ; ("String TeamAdminController.editProfileForm(Principal,Model)", ["src"; "sin"])
   ; ("String TeamAdminController.getTeamAdminPage(Model)", ["src"; "sin"])
   ; ("boolean SignInService.isSpringMember(String,GitHub)", ["src"])
   ; ("MemberProfile SignInService.getOrCreateMemberProfile(Long,GitHub)", ["non"])
   ; ("String GeoLocationFormatter.print(GeoLocation,Locale)", ["non"])
   ; ("String GeoLocationFormatter.print(Object,Locale)", ["non"])
   ; ("GeoLocation GeoLocationFormatter.parse(String,Locale)", ["san"])
   ; ("Object GeoLocationFormatter.parse(String,Locale)", ["san"])
   ; ("String DefaultTeamImporter.getNameForUser(String,GitHub)", ["non"])
   ; ("GitHubUser[] DefaultTeamImporter.getGitHubUsers(GitHub)", ["non"])
   ; ("void DefaultTeamImporter.importTeamMembers(GitHub)", ["non"])
   ; ("void TeamLocation.setName(String)", ["non"])
   ; ("void TeamLocation.setLongitude(float)", ["non"])
   ; ("String TeamLocation.getName()", ["non"])
   ; ("void TeamLocation.setLatitude(float)", ["non"])
   ; ("Long TeamLocation.getMemberId()", ["non"])
   ; ("float TeamLocation.getLatitude()", ["non"])
   ; ("float TeamLocation.getLongitude()", ["non"])
   ; ("int MemberProfile.hashCode()", ["san"])
   ; ("String MemberProfile.getGithubUsername()", ["non"])
   ; ("String MemberProfile.getTwitterUsername()", ["non"])
   ; ("String MemberProfile.getFullName()", ["non"])
   ; ("String MemberProfile.getGravatarEmail()", ["non"])
   ; ("void MemberProfile.setAvatarUrl(String)", ["non"])
   ; ("boolean MemberProfile.hasGithubUsername()", ["non"])
   ; ("void MemberProfile.setGithubId(Long)", ["non"])
   ; ("Link MemberProfile.getGithubLink()", ["non"])
   ; ("boolean MemberProfile.hasTwitterUsername()", ["non"])
   ; ("String MemberProfile.getVideoEmbeds()", ["non"])
   ; ("void MemberProfile.setSpeakerdeckUsername(String)", ["non"])
   ; ("void MemberProfile.setGithubUsername(String)", ["non"])
   ; ("Link MemberProfile.getTwitterLink()", ["non"])
   ; ("boolean MemberProfile.isHidden()", ["non"])
   ; ("String MemberProfile.getBio()", ["non"])
   ; ("void MemberProfile.setLocation(String)", ["non"])
   ; ("String MemberProfile.getSpeakerdeckUsername()", ["non"])
   ; ("Long MemberProfile.getId()", ["non"])
   ; ("String MemberProfile.getJobTitle()", ["non"])
   ; ("boolean MemberProfile.equals(Object)", ["non"])
   ; ("String MemberProfile.getLocation()", ["non"])
   ; ("Long MemberProfile.getGithubId()", ["non"])
   ; ("void MemberProfile.setName(String)", ["non"])
   ; ("void MemberProfile.setVideoEmbeds(String)", ["non"])
   ; ("void MemberProfile.setJobTitle(String)", ["non"])
   ; ("TeamLocation MemberProfile.getTeamLocation()", ["non"])
   ; ("void MemberProfile.setTwitterUsername(String)", ["non"])
   ; ("String MemberProfile.getAvatarUrl()", ["non"])
   ; ("void MemberProfile.setGeoLocation(GeoLocation)", ["non"])
   ; ("String MemberProfile.getLanyrdUsername()", ["non"])
   ; ("boolean MemberProfile.hasSpeakerdeckUsername()", ["non"])
   ; ("void MemberProfile.setLanyrdUsername(String)", ["non"])
   ; ("boolean MemberProfile.hasLanyrdUsername()", ["non"])
   ; ("void MemberProfile.setUsername(String)", ["non"])
   ; ("Link MemberProfile.getLanyrdLink()", ["non"])
   ; ("void MemberProfile.setHidden(boolean)", ["non"])
   ; ("GeoLocation MemberProfile.getGeoLocation()", ["non"])
   ; ("void MemberProfile.setBio(String)", ["non"])
   ; ("Link MemberProfile.getSpeakerdeckLink()", ["non"])
   ; ("String MemberProfile.getName()", ["non"])
   ; ("String MemberProfile.getUsername()", ["non"])
   ; ("void MemberProfile.setGravatarEmail(String)", ["non"])
   ; (* ("boolean Link.equals(Object)", []); *)
     (* ("int Link.hashCode()", []); *)
     (* ("String Link.getHrefResolved()", []); *)
     (* ("void Link.setHreflang(String)", []); *)
     (* ("String Link.getTitle()", []); *)
     (* ("void Link.setLength(long)", []); *)
     (* ("void Link.setHrefResolved(String)", []); *)
     (* ("String Link.getHreflang()", []); *)
     (* ("String Link.toString()", []); *)
     (* ("Object Link.clone()", []); *)
     (* ("void Link.setTitle(String)", []); *)
     (* ("String Link.getRel()", []); *)
     (* ("long Link.getLength()", []); *)
     (* ("void Link.setType(String)", []); *)
     (* ("String Link.getType()", []); *)
     ("String Link.getHref()", ["non"])
   ; ("void GeoLocation.setLongitude(float)", ["non"])
   ; ("float GeoLocation.getLatitude()", ["non"])
   ; ("void GeoLocation.setLatitude(float)", ["non"])
   ; ("float GeoLocation.getLongitude()", ["non"])
   ; ("Section Section.valueOf(String)", ["non"])
   ; ("Section[] Section.values()", ["non"])
   ; ("List PaginationInfo.getPageElements()", ["non"])
   ; ("long PaginationInfo.getPreviousPageNumber()", ["non"])
   ; ("boolean PaginationInfo.isNextVisible()", ["non"])
   ; ("boolean PaginationInfo.equals(Object)", ["non"])
   ; ("boolean PaginationInfo.isVisible()", ["non"])
   ; ("long PaginationInfo.getNextPageNumber()", ["non"])
   ; ("int PaginationInfo.hashCode()", ["san"])
   ; ("boolean PaginationInfo.isPreviousVisible()", ["non"])
   ; ("Pageable PageableFactory.build(int,int)", ["non"])
   ; ("Pageable PageableFactory.first(int)", ["non"])
   ; ("Pageable PageableFactory.forLists(int)", ["non"])
   ; ("Pageable PageableFactory.forFeeds()", ["non"])
   ; ("Pageable PageableFactory.all()", ["non"])
   ; ("Pageable PageableFactory.forSearch(int)", ["non"])
   ; ("Pageable PageableFactory.forDashboard(int)", ["non"])
   ; ("void PageElementsBuilder.addPageElements(ArrayList)", ["non"])
   ; ("List PageElementsBuilder.build()", ["non"])
   ; ("void PageElementsBuilder.addLastPage(ArrayList)", ["non"])
   ; ("void PageElementsBuilder.addEllipsis(ArrayList)", ["non"])
   ; ("void PageElementsBuilder.addFirstPage(ArrayList)", ["non"])
   ; ("void PageElementsBuilder.findEndPage()", ["non"])
   ; ("void PageElementsBuilder.findStartPage()", ["non"])
   ; ("String PageElement.getLabel()", ["non"])
   ; ("boolean PageElement.isCurrentPage()", ["non"])
   ; ("boolean PageElement.isNavigable()", ["non"])
   ; ("GitHubConnectionFactory GitHubConfig.gitHubConnectionFactory()", ["non"])
   ; ("GitHub GitHubConfig.gitHubTemplate()", ["non"])
   ; ("void RedisCacheManager.setDynamic(boolean)", ["non"])
   ; ("Cache RedisCacheManager.getCache(String)", ["non"])
   ; ("RedisCacheManager RedisCacheManager.withCache(String,long)", ["non"])
   ; ("void RedisCacheManager.setDefaultExpiration(long)", ["non"])
   ; ("void RedisCacheManager.setCachePrefix(RedisCachePrefix)", ["non"])
   ; ("RedisCacheManager RedisCacheManager.withCache(String,RedisTemplate,long)", ["non"])
   ; ("void RedisCacheManager.setUsePrefix(boolean)", ["non"])
   ; ("Collection RedisCacheManager.loadCaches()", ["non"])
   ; ("RedisCache RedisCacheManager.createCache(String,RedisTemplate,long)", ["non"])
   ; ("Object CachedRestClient.get(RestOperations,String,Class)", ["non"])
   ; ("Object CachedRestClient.post(RestOperations,String,Class,String)", ["non"])
   ; ("void TuckeyRewriteFilter.loadUrlRewriter(FilterConfig)", ["non"])
   ; ("String StaticPagePathFinder.relativeFilePath(String,Resource)", ["non"])
   ; ("String StaticPagePathFinder$PagePaths.getFilePath()", ["non"])
   ; ("List StaticPagePathFinder.findPaths()", ["non"])
   ; ("String StaticPagePathFinder.buildRequestMapping(String)", ["non"])
   ; ("String StaticPagePathFinder$PagePaths.getUrlPath()", ["non"])
   ; ("Date DateFactory.now()", ["non"])
   ; ("TimeZone DateFactory.timeZone()", ["non"])
   ; ("GuideMetadata[] SaganRendererClient.fetchTutorialGuides()", ["non"])
   ; ("GuideMetadata[] SaganRendererClient.fetchTopicalGuides()", ["non"])
   ; ("String SaganRendererClient.renderMarkup(String,MediaType)", ["non"])
   ; ("GuideMetadata SaganRendererClient.fetchGettingStartedGuide(String)", ["non"])
   ; ("GuideMetadata[] SaganRendererClient.fetchGettingStartedGuides()", ["non"])
   ; ("GuideMetadata SaganRendererClient.fetchTutorialGuide(String)", ["non"])
   ; ("GuideContent SaganRendererClient.fetchTopicalGuideContent(String)", ["non"])
   ; ("GuideContent SaganRendererClient.fetchTutorialGuideContent(String)", ["non"])
   ; ("GuideMetadata SaganRendererClient.fetchTopicalGuide(String)", ["non"])
   ; ("String SaganRendererClient.renderMarkdown(String)", ["non"])
   ; ("GuideMetadata[] SaganRendererClient.fetchAllGuides()", ["non"])
   ; ("String SaganRendererClient.renderAsciidoc(String)", ["non"])
   ; ("GuideContent SaganRendererClient.fetchGettingStartedGuideContent(String)", ["non"])
   ; ("GuideType GuideType.fromName(String)", ["non"])
   ; ("String GuideType.getName()", ["non"])
   ; ("GuideType[] GuideType.values()", ["non"])
   ; ("GuideType GuideType.valueOf(String)", ["non"])
   ; ("String GuideType.toString()", ["non"])
   ; ("String GuideMetadata.getDescription()", ["non"])
   ; ("String GuideMetadata.getCloneUrl()", ["non"])
   ; ("String GuideMetadata.getSshUrl()", ["non"])
   ; ("String GuideMetadata.getTitle()", ["non"])
   ; ("String GuideMetadata.getRepositoryName()", ["non"])
   ; ("String GuideMetadata.getGithubUrl()", ["non"])
   ; ("String GuideMetadata.getName()", ["non"])
   ; ("String GuideMetadata.getGitUrl()", ["non"])
   ; ("Set GuideMetadata.getProjects()", ["non"])
   ; ("GuideType GuideMetadata.getType()", ["non"])
   ; ("String GuideImage.getEncodedContent()", ["non"])
   ; ("void GuideImage.setEncodedContent(String)", ["non"])
   ; ("String GuideImage.getName()", ["non"])
   ; ("void GuideImage.setName(String)", ["non"])
   ; ("String GuideContent.getContent()", ["non"])
   ; ("String GuideContent.getPushToPwsMetadata()", ["non"])
   ; ("String GuideContent.getRepositoryName()", ["non"])
   ; ("List GuideContent.getImages()", ["non"])
   ; ("String GuideContent.getTableOfContents()", ["non"])
   ; ("String LearnController.learn(Model)", ["src"; "sin"])
   ; ("void Tutorials.evictFromCache(String)", ["sin"])
   ; ("Optional Tutorials.findByName(String)", ["non"])
   ; ("GuideHeader[] Tutorials.findAll()", ["non"])
   ; ("Optional Tutorials.findGuideHeaderByName(String)", ["non"])
   ; ("void Tutorials.evictListFromCache()", ["sin"])
   ; ("GuideHeader[] Tutorials.findByProject(Project)", ["non"])
   ; ("ResponseEntity TutorialController.loadImage(String,String)", ["src"; "sin"])
   ; ("String TutorialController.viewTutorial(String,Model)", ["non"])
   ; ("String Tutorial.getGithubUrl()", ["non"])
   ; ("void Tutorial.setTypeLabel(String)", ["non"])
   ; ("String Tutorial.getCiStatusImageUrl()", ["non"])
   ; ("String Tutorial.getCloneUrl()", ["non"])
   ; ("String Tutorial.getDescription()", ["non"])
   ; ("String Tutorial.getContent()", ["non"])
   ; ("String Tutorial.getRepositoryName()", ["non"])
   ; ("String Tutorial.getTypeLabel()", ["non"])
   ; ("String Tutorial.getTitle()", ["non"])
   ; ("Set Tutorial.getProjects()", ["non"])
   ; ("void Tutorial.setImages(List)", ["non"])
   ; ("String Tutorial.getName()", ["non"])
   ; ("String Tutorial.getPushToPwsUrl()", ["non"])
   ; ("String Tutorial.getTableOfContents()", ["non"])
   ; ("Optional Tutorial.getImageContent(String)", ["non"])
   ; ("String Tutorial.getCiLatestUrl()", ["non"])
   ; ("String Tutorial.getZipUrl()", ["non"])
   ; ("String Tutorial.getGitUrl()", ["non"])
   ; ("List Tutorial.getImages()", ["non"])
   ; ("String Tutorial.getSshUrl()", ["non"])
   ; ("GuideHeader Tutorial.getHeader()", ["non"])
   ; ("Optional Topicals.findGuideHeaderByName(String)", ["non"])
   ; ("GuideHeader[] Topicals.findAll()", ["non"])
   ; ("Optional Topicals.findByName(String)", ["non"])
   ; ("void Topicals.evictListFromCache()", ["sin"])
   ; ("GuideHeader[] Topicals.findByProject(Project)", ["non"])
   ; ("void Topicals.evictFromCache(String)", ["sin"])
   ; ("String TopicalController.viewTutorial(String,Model)", ["src"; "sin"])
   ; ("ResponseEntity TopicalController.loadImage(String,String)", ["src"; "sin"])
   ; ("String Topical.getSshUrl()", ["non"])
   ; ("String Topical.getCiLatestUrl()", ["non"])
   ; ("String Topical.getName()", ["non"])
   ; ("void Topical.setTypeLabel(String)", ["non"])
   ; ("String Topical.getContent()", ["non"])
   ; ("String Topical.getGithubUrl()", ["non"])
   ; ("String Topical.getTypeLabel()", ["non"])
   ; ("String Topical.getRepositoryName()", ["non"])
   ; ("String Topical.getCloneUrl()", ["non"])
   ; ("String Topical.getTitle()", ["non"])
   ; ("String Topical.getDescription()", ["non"])
   ; ("String Topical.getCiStatusImageUrl()", ["non"])
   ; ("String Topical.getZipUrl()", ["non"])
   ; ("List Topical.getImages()", ["non"])
   ; ("GuideHeader Topical.getHeader()", ["non"])
   ; ("Optional Topical.getImageContent(String)", ["non"])
   ; ("String Topical.getPushToPwsUrl()", ["non"])
   ; ("String Topical.getGitUrl()", ["non"])
   ; ("void Topical.setImages(List)", ["non"])
   ; ("Set Topical.getProjects()", ["non"])
   ; ("String Topical.getTableOfContents()", ["non"])
   ; ("String GuideIndexController.viewIndex(Model)", ["non"])
   ; ("void GuideImage.setName(String)", ["non"])
   ; ("String GuideImage.getName()", ["non"])
   ; ("void GuideImage.setEncodedContent(String)", ["non"])
   ; ("String GuideImage.getEncodedContent()", ["non"])
   ; ("Optional GettingStartedGuides.findGuideHeaderByName(String)", ["non"])
   ; ("GuideHeader[] GettingStartedGuides.findAll()", ["non"])
   ; ("Optional GettingStartedGuides.findByName(String)", ["non"])
   ; ("GuideHeader[] GettingStartedGuides.findByProject(Project)", ["non"])
   ; ("void GettingStartedGuides.evictListFromCache()", ["sin"])
   ; ("void GettingStartedGuides.evictFromCache(String)", ["sin"])
   ; ("ResponseEntity GettingStartedGuideController.loadImage(String,String)", ["src"; "sin"])
   ; ("String GettingStartedGuideController.viewGuide(String,Model)", ["src"; "sin"])
   ; ("void GettingStartedGuide.setTypeLabel(String)", ["non"])
   ; ("String GettingStartedGuide.getRepositoryName()", ["non"])
   ; ("String GettingStartedGuide.getContent()", ["non"])
   ; ("String GettingStartedGuide.getSshUrl()", ["non"])
   ; ("void GettingStartedGuide.setImages(List)", ["non"])
   ; ("String GettingStartedGuide.getCiLatestUrl()", ["non"])
   ; ("Set GettingStartedGuide.getProjects()", ["non"])
   ; ("String GettingStartedGuide.getTitle()", ["non"])
   ; ("String GettingStartedGuide.getCloneUrl()", ["non"])
   ; ("String GettingStartedGuide.getZipUrl()", ["non"])
   ; ("String GettingStartedGuide.getGitUrl()", ["non"])
   ; ("GuideHeader GettingStartedGuide.getHeader()", ["non"])
   ; ("Optional GettingStartedGuide.getImageContent(String)", ["non"])
   ; ("String GettingStartedGuide.getCiStatusImageUrl()", ["non"])
   ; ("String GettingStartedGuide.getTableOfContents()", ["non"])
   ; ("String GettingStartedGuide.getGithubUrl()", ["non"])
   ; ("List GettingStartedGuide.getImages()", ["non"])
   ; ("String GettingStartedGuide.getDescription()", ["non"])
   ; ("String GettingStartedGuide.getTypeLabel()", ["non"])
   ; ("String GettingStartedGuide.getName()", ["non"])
   ; ("String GettingStartedGuide.getPushToPwsUrl()", ["non"])
   ; ( "ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String)"
     , ["src"; "sin"] )
   ; ( "ResponseEntity DocsWebhookController.processTopicalsUpdate(String,String,String,String)"
     , ["src"; "sin"] )
   ; ( "ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String,String)"
     , ["src"; "sin"] )
   ; ( "ResponseEntity \
        DocsWebhookController.handleWebhookAuthenticationFailure(WebhookAuthenticationException)"
     , ["src"; "sin"] )
   ; ("void DocsWebhookController.verifyHmacSignature(String,String)", ["san"])
   ; ("void DocsWebhookController.logPayload(Map)", ["non"])
   ; ("ResponseEntity DocsWebhookController.handlePayloadParsingException(IOException)", ["sin"])
   ; ( "ResponseEntity DocsWebhookController.processTutorialsUpdate(String,String,String)"
     , ["src"; "sin"] )
   ; ( "ResponseEntity DocsWebhookController.processGuidesUpdate(String,String,String,String)"
     , ["src"; "sin"] )
   ; ("String DocsWebhookController.stripPrefix(String)", ["non"])
   ; ("String DefaultGuideHeader.getGitUrl()", ["non"])
   ; ("String DefaultGuideHeader.getCiStatusImageUrl()", ["non"])
   ; ("String DefaultGuideHeader.getSshUrl()", ["non"])
   ; ("String DefaultGuideHeader.getGithubUrl()", ["non"])
   ; ("String DefaultGuideHeader.getRepositoryName()", ["non"])
   ; ("String DefaultGuideHeader.getZipUrl()", ["non"])
   ; ("String DefaultGuideHeader.getTitle()", ["non"])
   ; ("String DefaultGuideHeader.getCloneUrl()", ["non"])
   ; ("String DefaultGuideHeader.getName()", ["non"])
   ; ("Set DefaultGuideHeader.getProjects()", ["non"])
   ; ("String DefaultGuideHeader.getCiLatestUrl()", ["non"])
   ; ("String DefaultGuideHeader.getDescription()", ["non"])
   ; ("String AbstractGuide.getDescription()", ["non"])
   ; ("String AbstractGuide.getGithubUrl()", ["non"])
   ; ("String AbstractGuide.getGitUrl()", ["non"])
   ; ("void AbstractGuide.setTypeLabel(String)", ["non"])
   ; ("String AbstractGuide.getZipUrl()", ["non"])
   ; ("Optional AbstractGuide.getImageContent(String)", ["non"])
   ; ("String AbstractGuide.getTitle()", ["non"])
   ; ("List AbstractGuide.getImages()", ["non"])
   ; ("String AbstractGuide.getTypeLabel()", ["non"])
   ; ("String AbstractGuide.getCloneUrl()", ["non"])
   ; ("String AbstractGuide.getCiLatestUrl()", ["non"])
   ; ("Set AbstractGuide.getProjects()", ["non"])
   ; ("String AbstractGuide.getRepositoryName()", ["non"])
   ; ("String AbstractGuide.getTableOfContents()", ["non"])
   ; ("String AbstractGuide.createPushToPwsUrl(String)", ["non"])
   ; ("String AbstractGuide.getCiStatusImageUrl()", ["non"])
   ; ("String AbstractGuide.getName()", ["non"])
   ; ("String AbstractGuide.getSshUrl()", ["non"])
   ; ("String AbstractGuide.getContent()", ["non"])
   ; ("GuideHeader AbstractGuide.getHeader()", ["non"])
   ; ("void AbstractGuide.setImages(List)", ["non"])
   ; ("String AbstractGuide.getPushToPwsUrl()", ["non"])
   ; ("String Period.toString()", ["non"])
   ; ("LocalDate Period.getStartDate()", ["non"])
   ; ("int Period.getDays()", ["non"])
   ; ("Period Period.of(String,int)", ["non"])
   ; ("Predicate Period.toCalendarFilter()", ["non"])
   ; ("String EventsController.events(Model)", ["src"; "sin"])
   ; ("String EventsController.community(Model)", ["src"; "sin"])
   ; ("List EventsCalendarService.findEvents(Period)", ["non"])
   ; ("LocalDate Event.getFirstDay()", ["non"])
   ; ("URI Event.parseLink(VEvent)", ["san"])
   ; ("URI Event.getLink()", ["non"])
   ; ("LocalDate Event.getLastDay()", ["non"])
   ; ("String Event.getLocation()", ["non"])
   ; ("int Event.compareTo(Object)", ["non"])
   ; ("int Event.compareTo(Event)", ["non"])
   ; ("boolean Event.isSingleDayEvent()", ["non"])
   ; ("String Event.getSummary()", ["non"])
   ; ("String PostSummary.forContent(String,int)", ["non"])
   ; ("Date PostFormAdapter.createdDate(PostForm,Date)", ["non"])
   ; ("void PostFormAdapter.setPostProperties(PostForm,String,Post)", ["non"])
   ; ("void PostFormAdapter.updatePostFromPostForm(Post,PostForm)", ["non"])
   ; ("void PostFormAdapter.refreshPost(Post)", ["non"])
   ; ("void PostFormAdapter.summarize(Post)", ["non"])
   ; ("Date PostFormAdapter.publishDate(PostForm)", ["non"])
   ; ("Post PostFormAdapter.createPostFromPostForm(PostForm,String)", ["non"])
   ; ("void PostForm.setBroadcast(boolean)", ["non"])
   ; ("String PostForm.getTitle()", ["non"])
   ; ("void PostForm.setPublishAt(Date)", ["non"])
   ; ("PostFormat PostForm.getFormat()", ["non"])
   ; ("PostCategory PostForm.getCategory()", ["non"])
   ; ("void PostForm.setCreatedAt(Date)", ["non"])
   ; ("void PostForm.setContent(String)", ["non"])
   ; ("boolean PostForm.isDraft()", ["non"])
   ; ("Date PostForm.getPublishAt()", ["non"])
   ; ("String PostForm.getContent()", ["non"])
   ; ("boolean PostForm.isBroadcast()", ["non"])
   ; ("void PostForm.setFormat(PostFormat)", ["non"])
   ; ("Date PostForm.getCreatedAt()", ["non"])
   ; ("void PostForm.setTitle(String)", ["non"])
   ; ("void PostForm.setDraft(boolean)", ["non"])
   ; ("void PostForm.setCategory(PostCategory)", ["non"])
   ; ("String PostContentRenderer.render(String,PostFormat)", ["non"])
   ; ("String PostContentRenderer.decode(String)", ["san"])
   ; ("String PostContentRenderer.renderCallouts(String)", ["non"])
   ; ("PostCategory PostCategoryFormatter.parse(String,Locale)", ["san"])
   ; ("Object PostCategoryFormatter.parse(String,Locale)", ["san"])
   ; ("String PostCategoryFormatter.print(PostCategory,Locale)", ["non"])
   ; ("String PostCategoryFormatter.print(Object,Locale)", ["non"])
   ; ("Page BlogService.getPublishedPosts(Pageable)", ["non"])
   ; ("Page BlogService.getPublishedPostsByDate(int,int,int,Pageable)", ["non"])
   ; ("Page BlogService.getPublishedPostsByDate(int,Pageable)", ["non"])
   ; ("Page BlogService.getPublishedPosts(PostCategory,Pageable)", ["non"])
   ; ("void BlogService.deletePost(Post)", ["non"])
   ; ("Page BlogService.getAllPosts(Pageable)", ["non"])
   ; ("Post BlogService.addPost(PostForm,String)", ["non"])
   ; ("Post BlogService.getPost(Long)", ["non"])
   ; ("Post BlogService.getPost(String,Date)", ["non"])
   ; ("Post BlogService.getPublishedPost(String)", ["non"])
   ; ("List BlogService.getAllPublishedPosts()", ["non"])
   ; ("Page BlogService.getPublishedPostsByDate(int,int,Pageable)", ["non"])
   ; ("Page BlogService.getScheduledPosts(Pageable)", ["non"])
   ; ("String BlogService.getDisqusShortname()", ["non"])
   ; ("void BlogService.updatePost(Post,PostForm)", ["non"])
   ; ("Page BlogService.getPublishedPostsForMember(MemberProfile,Pageable)", ["non"])
   ; ("Page BlogService.refreshPosts(int,int)", ["non"])
   ; ("Page BlogService.getPublishedBroadcastPosts(Pageable)", ["non"])
   ; ("Page BlogService.getDraftPosts(Pageable)", ["non"])
   ; ("void BlogService.resummarizeAllPosts()", ["non"])
   ; ("URL VersionBadgeService.getTemplate(ProjectRelease$ReleaseStatus)", ["non"])
   ; ("void VersionBadgeService.preDestroy()", ["non"])
   ; ("void VersionBadgeService.postConstruct()", ["non"])
   ; ("byte[] VersionBadgeService.createSvgBadge(BadgeSvg,List,String,String)", ["non"])
   ; ("byte[] VersionBadgeService.createSvgBadge(Project,ProjectRelease)", ["non"])
   ; ("int Version.hashCode()", ["non"])
   ; ("boolean Version.equals(Object)", ["non"])
   ; ("Version Version.getBaseVersion()", ["non"])
   ; ("String Version.toString()", ["non"])
   ; ("boolean Version.isQualified()", ["non"])
   ; ("String[] Version.getParts()", ["non"])
   ; ("Version Version.build(String)", ["non"])
   ; ("String ProjectsController.stackOverflowUrl(Project)", ["non"])
   ; ("String ProjectsController.listProjects(Model)", ["src"; "sin"])
   ; ("String ProjectsController.showProject(Model,String)", ["src"; "sin"])
   ; ("void ProjectMetadataService.delete(String)", ["non"])
   ; ("List ProjectMetadataService.getActiveTopLevelProjects()", ["non"])
   ; ("List ProjectMetadataService.getProjectsWithReleases()", ["non"])
   ; ("Project ProjectMetadataService.getProject(String)", ["non"])
   ; ("Project ProjectMetadataService.save(Project)", ["non"])
   ; ("List ProjectMetadataService.getAllGroups()", ["non"])
   ; ("List ProjectMetadataService.getProjectsWithGroups()", ["non"])
   ; ("List ProjectMetadataService.getProjectsForCategory(String)", ["non"])
   ; ("List ProjectMetadataService.getProjects()", ["non"])
   ; ("Project ProjectMetadataController.projectMetadata(String)", ["src"; "sin"])
   ; ( "ProjectRelease ProjectMetadataController.updateReleaseMetadata(String,ProjectRelease)"
     , ["src"; "sin"] )
   ; ("void ProjectMetadataController.handle()", ["sin"])
   ; ("Project ProjectMetadataController.updateProjectMetadata(String,List)", ["src"; "sin"])
   ; ("List ProjectMetadataController.releaseMetadata(String)", ["src"; "sin"])
   ; ("Project ProjectMetadataController.updateProject(String,Project)", ["src"; "sin"])
   ; ("ProjectRelease ProjectMetadataController.releaseMetadata(String,String)", ["src"; "sin"])
   ; ( "ProjectRelease ProjectMetadataController.removeReleaseMetadata(String,String)"
     , ["src"; "sin"] )
   ; ("String ProjectAdminController.delete(String,Model)", ["src"])
   ; ("void ProjectAdminController.normalizeProjectReleases(Project,String)", ["non"])
   ; ("String ProjectAdminController.list(Model)", ["src"; "sin"])
   ; ("String ProjectAdminController.newProject(Model)", ["src"; "sin"])
   ; ("String ProjectAdminController.save(Project,List,List,String,String)", ["src"; "sin"])
   ; ("String ProjectAdminController.edit(String,Model)", ["src"; "sin"])
   ; ("String ProjectAdminController.edit(Project,Model)", ["src"; "sin"])
   ; ("void ProjectAdminController.denormalizeProjectReleases(Project)", ["non"])
   ; ("ResponseEntity BadgeController.latestBadge(String)", ["src"; "sin"])
   ; ("ResponseEntity BadgeController.prereleaseBadge(String)", ["src"; "sin"])
   ; ("ResponseEntity BadgeController.releaseBadge(String)", ["src"; "sin"])
   ; ("ResponseEntity BadgeController.badgeFor(String,ProjectRelease$ReleaseStatus)", ["src"; "sin"])
   ; ("Optional BadgeController.getRelease(Collection,Predicate)", ["non"])
   ; ("ResponseEntity BadgeController.snapshotBadge(String)", ["src"; "sin"])
   ; ("String ProjectSample.getTitle()", ["non"])
   ; ("String ProjectSample.getDescription()", ["non"])
   ; ("int ProjectSample.getDisplayOrder()", ["non"])
   ; ("void ProjectSample.setDisplayOrder(int)", ["non"])
   ; ("void ProjectSample.setUrl(String)", ["non"])
   ; ("String ProjectSample.getUrl()", ["non"])
   ; ("void ProjectSample.setDescription(String)", ["non"])
   ; ("void ProjectSample.setTitle(String)", ["non"])
   ; ("void ProjectRepository.setId(String)", ["non"])
   ; ("String ProjectRepository.toString()", ["non"])
   ; ("int ProjectRepository.hashCode()", ["non"])
   ; ("void ProjectRepository.setUrl(String)", ["non"])
   ; ("String ProjectRepository.getId()", ["non"])
   ; ("String ProjectRepository.getName()", ["non"])
   ; ("Boolean ProjectRepository.getSnapshotsEnabled()", ["non"])
   ; ("ProjectRepository ProjectRepository.get(String,ProjectRelease$ReleaseStatus)", ["non"])
   ; ("boolean ProjectRepository.equals(Object)", ["non"])
   ; ("void ProjectRepository.setName(String)", ["non"])
   ; ("void ProjectRepository.setSnapshotsEnabled(Boolean)", ["non"])
   ; ("String ProjectRepository.getUrl()", ["non"])
   ; ("String ProjectRelease.getVersionDisplayName(boolean)", ["non"])
   ; ("int ProjectRelease.hashCode()", ["non"])
   ; ("ProjectRelease$ReleaseStatus ProjectRelease$ReleaseStatus.getFromVersion(String)", ["non"])
   ; ("void ProjectRelease.setGroupId(String)", ["non"])
   ; ("boolean ProjectRelease.equals(Object)", ["non"])
   ; ("boolean ProjectRelease.hasRefDocUrl()", ["non"])
   ; ("boolean ProjectRelease.isPreRelease()", ["non"])
   ; ("boolean ProjectRelease.isSnapshot()", ["non"])
   ; ("int ProjectRelease.compareTo(ProjectRelease)", ["non"])
   ; ("int ProjectRelease.compareTo(Object)", ["non"])
   ; ("String ProjectRelease.getGroupId()", ["non"])
   ; ("void ProjectRelease.setCurrent(boolean)", ["non"])
   ; ("boolean ProjectRelease.isGeneralAvailability()", ["non"])
   ; ("void ProjectRelease.setApiDocUrl(String)", ["non"])
   ; ("boolean ProjectRelease.hasApiDocUrl()", ["non"])
   ; ("String ProjectRelease.getVersionDisplayName()", ["non"])
   ; ("String ProjectRelease.getApiDocUrl()", ["non"])
   ; ("boolean ProjectRelease.isNumber(String)", ["non"])
   ; ("void ProjectRelease.setArtifactId(String)", ["non"])
   ; ("ProjectRepository ProjectRelease.getRepository()", ["non"])
   ; ("void ProjectRelease.setVersion(String)", ["non"])
   ; ("ProjectRelease$ReleaseStatus ProjectRelease$ReleaseStatus.valueOf(String)", ["non"])
   ; ("String ProjectRelease.getArtifactId()", ["non"])
   ; ("String ProjectRelease.getVersion()", ["non"])
   ; ("void ProjectRelease.replaceVersionPattern()", ["non"])
   ; ("String ProjectRelease.getRefDocUrl()", ["non"])
   ; ("ProjectRelease ProjectRelease.createWithVersionPattern()", ["non"])
   ; ("void ProjectRelease.setRefDocUrl(String)", ["non"])
   ; ("void ProjectRelease.setRepository(ProjectRepository)", ["non"])
   ; ("String ProjectRelease.toString()", ["non"])
   ; ("ProjectRelease$ReleaseStatus ProjectRelease.getReleaseStatus()", ["non"])
   ; ("ProjectRelease$ReleaseStatus[] ProjectRelease$ReleaseStatus.values()", ["non"])
   ; ("boolean ProjectRelease.isCurrent()", ["non"])
   ; ("void ProjectRelease.setReleaseStatus(ProjectRelease$ReleaseStatus)", ["non"])
   ; ( "ProjectPatchingService$ObjectPatcher \
        ProjectPatchingService$ObjectPatcher.patch(Object,Object)"
     , ["non"] )
   ; ("Object ProjectPatchingService$ObjectPatcher.patchedValue()", ["non"])
   ; ( "ProjectPatchingService$ObjectPatcher \
        ProjectPatchingService$ObjectPatcher.mutateIfDirty(Function,BiConsumer)"
     , ["non"] )
   ; ("Project ProjectPatchingService.patch(Project,Project)", ["non"])
   ; ("boolean ProjectPatchingService$ObjectPatcher.isDirty(Object,Object)", ["non"])
   ; ("String ProjectGroup.getName()", ["non"])
   ; ("int ProjectGroup.hashCode()", ["non"])
   ; ("Long ProjectGroup.getId()", ["non"])
   ; ("void ProjectGroup.setId(Long)", ["non"])
   ; ("boolean ProjectGroup.equals(Object)", ["non"])
   ; ("void ProjectGroup.setName(String)", ["non"])
   ; ("String ProjectGroup.getLabel()", ["non"])
   ; ("String ProjectGroup.toString()", ["non"])
   ; ("void ProjectGroup.setLabel(String)", ["non"])
   ; ("String Project.getStackOverflowTags()", ["non"])
   ; ("String Project.toString()", ["non"])
   ; ("void Project.setStackOverflowTags(String)", ["non"])
   ; ("void Project.setTagLine(String)", ["non"])
   ; ("String Project.getRawOverview()", ["non"])
   ; ("void Project.setSiteUrl(String)", ["non"])
   ; ("String Project.getImagePath()", ["non"])
   ; ("String Project.getParentId()", ["non"])
   ; ("List Project.getProjectReleases()", ["non"])
   ; ("Set Project.getGroups()", ["non"])
   ; ("void Project.setGroups(Set)", ["non"])
   ; ("String Project.getRawBootConfig()", ["non"])
   ; ("String Project.getSiteUrl()", ["non"])
   ; ("boolean Project.isTopLevelProject()", ["non"])
   ; ("void Project.setFeatured(boolean)", ["non"])
   ; ("void Project.setReleaseList(List)", ["non"])
   ; ("void Project.setProjectSamples(List)", ["non"])
   ; ("Project Project.getParentProject()", ["non"])
   ; ("String Project.getRenderedBootConfig()", ["non"])
   ; ("boolean Project.hasSite()", ["non"])
   ; ("void Project.setRawBootConfig(String)", ["non"])
   ; ("String Project.getTagLine()", ["non"])
   ; ("void Project.setId(String)", ["non"])
   ; ("String Project.getId()", ["non"])
   ; ("boolean Project.updateProjectRelease(ProjectRelease)", ["non"])
   ; ("String Project.getRenderedOverview()", ["non"])
   ; ("ProjectRelease Project.removeProjectRelease(String)", ["non"])
   ; ("ProjectRelease Project.getProjectRelease(String)", ["non"])
   ; ("void Project.setName(String)", ["non"])
   ; ("List Project.getNonMostCurrentReleases()", ["non"])
   ; ("List Project.getProjectSamples()", ["non"])
   ; ("void Project.setRenderedOverview(String)", ["non"])
   ; ("List Project.getChildProjectList()", ["non"])
   ; ("void Project.setChildProjectList(List)", ["non"])
   ; ("void Project.setRepoUrl(String)", ["non"])
   ; ("void Project.setProjectReleases(List)", ["non"])
   ; ("String Project.getCategory()", ["non"])
   ; ("void Project.setRawOverview(String)", ["non"])
   ; ("void Project.setRenderedBootConfig(String)", ["non"])
   ; ("boolean Project.equals(Object)", ["non"])
   ; ("int Project.hashCode()", ["san"])
   ; ("boolean Project.isFeatured()", ["non"])
   ; ("String Project.getName()", ["non"])
   ; ("void Project.setDisplayOrder(int)", ["non"])
   ; ("Optional Project.getMostCurrentRelease()", ["non"])
   ; ("Set Project.getStackOverflowTagList()", ["non"])
   ; ("void Project.setImagePath(String)", ["non"])
   ; ("void Project.setParentProject(Project)", ["non"])
   ; ("void Project.setCategory(String)", ["non"])
   ; ("String Project.getRepoUrl()", ["non"])
   ; ("int Project.getDisplayOrder()", ["non"])
   ; ("String SiteUrl.getUrl()", ["non"])
   ; ("String SiteUrl.getAbsoluteUrl(String)", ["non"])
   ; ("Date PostView.getCreatedAt()", ["non"])
   ; ("PostCategory PostView.getCategory()", ["non"])
   ; ("String PostView.getRenderedSummary()", ["non"])
   ; ("boolean PostView.isDraft()", ["non"])
   ; ("MemberProfile PostView.getAuthor()", ["non"])
   ; ("Date PostView.getPublishAt()", ["non"])
   ; ("boolean PostView.showReadMore()", ["non"])
   ; ("Long PostView.getId()", ["non"])
   ; ("String PostView.getPath()", ["non"])
   ; ("Page PostView.pageOf(Page,DateFactory)", ["non"])
   ; ("String PostView.getUpdatePath()", ["non"])
   ; ("String PostView.getTitle()", ["non"])
   ; ("boolean PostView.isBroadcast()", ["non"])
   ; ("String PostView.getEditPath()", ["non"])
   ; ("boolean PostView.isScheduled()", ["non"])
   ; ("PostView PostView.of(Post,DateFactory)", ["non"])
   ; ("String PostView.getFormattedPublishDate()", ["non"])
   ; ("String PostView.getRenderedContent()", ["non"])
   ; ("String BlogController.listPublishedPostsForDate(int,int,int,int,Model)", ["src"; "sin"])
   ; ("String BlogController.listPublishedPostsForYear(int,int,Model)", ["src"; "sin"])
   ; ("String BlogController.listPublishedPostsForYearAndMonth(int,int,int,Model)", ["src"; "sin"])
   ; ("String BlogController.showPost(String,String,String,String,Model)", ["src"; "sin"])
   ; ("String BlogController.listPublishedPosts(Model,int)", ["src"; "sin"])
   ; ("RedirectView BlogController.handle(PostMovedException)", ["src"; "sin"])
   ; ("String BlogController.renderListOfPosts(Page,Model,String)", ["src"; "sin"])
   ; ("String BlogController.listPublishedPostsForCategory(PostCategory,Model,int)", ["src"; "sin"])
   ; ("String BlogController.listPublishedBroadcasts(Model,int)", ["src"; "sin"])
   ; ("String BlogAdminController.editPost(Long,String,Model)", ["src"; "sin"])
   ; ("String BlogAdminController.newPost(Model)", ["src"; "sin"])
   ; ("String BlogAdminController.resummarizeAllBlogPosts()", ["src"; "sin"])
   ; ("String BlogAdminController.dashboard(Model,int)", ["src"; "sin"])
   ; ("String BlogAdminController.deletePost(Long)", ["src"; "sin"])
   ; ("String BlogAdminController.showPost(Long,String,Model)", ["src"; "sin"])
   ; ("String BlogAdminController.refreshBlogPosts(int,int)", ["src"; "sin"])
   ; ( "String BlogAdminController.createPost(Principal,PostForm,BindingResult,Model)"
     , ["src"; "sin"] )
   ; ("String BlogAdminController.updatePost(Long,PostForm,BindingResult,Model)", ["src"; "sin"])
   ; ("void AtomFeedView.setUpdatedDate(Map,Feed)", ["non"])
   ; ("void AtomFeedView.setFeedUrl(String,Feed)", ["non"])
   ; ("List AtomFeedView.buildFeedEntries(Map,HttpServletRequest,HttpServletResponse)", ["non"])
   ; ("void AtomFeedView.setPostUrl(Post,Entry)", ["non"])
   ; ("void AtomFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ["non"])
   ; ("void AtomFeedView.buildFeedMetadata(Map,Feed,HttpServletRequest)", ["non"])
   ; ("void AtomFeedView.setBlogUrl(String,Feed)", ["non"])
   ; ("void AtomFeedView.setId(Post,Entry,HttpServletRequest)", ["non"])
   ; ("void AtomFeedView.setCategories(Post,Entry)", ["non"])
   ; ("void AtomFeedView.setAuthor(Post,Entry)", ["non"])
   ; ("void AtomFeedView.setRenderedContent(Post,Entry)", ["non"])
   ; ( "void AtomFeedController.prepareResponse(Model,HttpServletResponse,Page,String,String)"
     , ["non"] )
   ; ( "AtomFeedView AtomFeedController.listPublishedBroadcastPosts(Model,HttpServletResponse)"
     , ["src"; "sin"] )
   ; ( "AtomFeedView AtomFeedController.listPublishedPosts(Model,HttpServletResponse)"
     , ["src"; "sin"] )
   ; ( "AtomFeedView \
        AtomFeedController.listPublishedPostsForCategory(PostCategory,Model,HttpServletResponse)"
     , ["src"; "sin"] )
   ; ("String PostMovedException.getPublicSlug()", ["non"])
   ; ("PostFormat[] PostFormat.values()", ["non"])
   ; ("PostFormat PostFormat.valueOf(String)", ["non"])
   ; ("String PostFormat.getId()", ["non"])
   ; ("String PostFormat.toString()", ["non"])
   ; ("String PostFormat.getSlug()", ["non"])
   ; ("String PostFormat.getDisplayName()", ["non"])
   ; ("String PostCategory.getDisplayName()", ["non"])
   ; ("PostCategory[] PostCategory.values()", ["non"])
   ; ("String PostCategory.getUrlSlug()", ["non"])
   ; ("String PostCategory.toString()", ["non"])
   ; ("PostCategory PostCategory.valueOf(String)", ["non"])
   ; ("String PostCategory.getId()", ["non"])
   ; ("MemberProfile Post.getAuthor()", ["non"])
   ; ("String Post.getSlug()", ["non"])
   ; ("PostCategory Post.getCategory()", ["non"])
   ; ("void Post.setRawContent(String)", ["non"])
   ; ("Date Post.getPublishAt()", ["non"])
   ; ("void Post.addPublicSlugAlias(String)", ["non"])
   ; ("String Post.toString()", ["non"])
   ; ("void Post.setAuthor(MemberProfile)", ["non"])
   ; ("void Post.setCreatedAt(Date)", ["non"])
   ; ("void Post.setCategory(PostCategory)", ["non"])
   ; ("String Post.getTitle()", ["non"])
   ; ("String Post.getRenderedContent()", ["non"])
   ; ("boolean Post.isDraft()", ["non"])
   ; ("String Post.generatePublicSlug()", ["non"])
   ; ("PostFormat Post.getFormat()", ["non"])
   ; ("boolean Post.isBroadcast()", ["non"])
   ; ("void Post.setFormat(PostFormat)", ["non"])
   ; ("boolean Post.isScheduled()", ["non"])
   ; ("void Post.setPublishAt(Date)", ["non"])
   ; ("Date Post.getCreatedAt()", ["non"])
   ; ("boolean Post.isLiveOn(Date)", ["non"])
   ; ("String Post.getRawContent()", ["non"])
   ; ("String Post.getPublicSlug()", ["non"])
   ; ("void Post.setRenderedSummary(String)", ["non"])
   ; ("void Post.setTitle(String)", ["non"])
   ; ("Long Post.getId()", ["non"])
   ; ("void Post.setRenderedContent(String)", ["non"])
   ; ("String Post.getAdminSlug()", ["non"])
   ; ("void Post.setDraft(boolean)", ["non"])
   ; ("String Post.getRenderedSummary()", ["non"])
   ; ("void Post.setBroadcast(boolean)", ["non"])
   ; ("String AdminController.adminPage()", ["non"])
   ; ("FilterRegistrationBean UrlRewriterFilterConfig.rewriteFilterConfig()", ["non"])
   ; ("SiteProperties$Events SiteProperties.getEvents()", ["non"])
   ; ("void SiteProperties$Events.setCalendarUri(URI)", ["non"])
   ; ("Long SiteProperties$Cache.getContentTimeToLive()", ["non"])
   ; ("SiteProperties$Renderer SiteProperties.getRenderer()", ["non"])
   ; ("Long SiteProperties$Cache.getListTimeToLive()", ["non"])
   ; ("void SiteProperties$Cache.setContentTimeToLive(Long)", ["non"])
   ; ("void SiteProperties$Cache.setListTimeToLive(Long)", ["non"])
   ; ("String SiteProperties$Renderer.getServiceUrl()", ["non"])
   ; ("SiteProperties$Cache SiteProperties.getCache()", ["non"])
   ; ("URI SiteProperties$Events.getCalendarUri()", ["non"])
   ; ("void SiteProperties$Renderer.setServiceUrl(String)", ["non"])
   ; ("XmlMapper SiteApplication.xmlMapper()", ["non"])
   ; ("RestTemplate SiteApplication.restTemplate()", ["non"])
   ; ("ObjectMapper SiteApplication.objectMapper()", ["non"])
   ; ("void SiteApplication.main(String[])", ["non"])
   ; ( "Authentication SecurityConfig$ApiAuthenticationConfig$1.authenticate(Authentication)"
     , ["san"] )
   ; ("String SecurityConfig$RemoteUsernameConnectionSignUp.execute(Connection)", ["sin"])
   ; (* UNSURE *)
     ( "void \
        SecurityConfig$AdminAuthenticationConfig$1.doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)"
     , ["san"] )
   ; ( "AuthenticationManager SecurityConfig$ApiAuthenticationConfig.githubAuthenticationManager()"
     , ["san"] )
   ; ("void SecurityConfig.configureHeaders(HeadersConfigurer)", ["non"])
   ; ( "String \
        SecurityConfig$GithubAuthenticationSigninAdapter.signIn(String,Connection,NativeWebRequest)"
     , ["non"] )
   ; ("void SecurityConfig$SigninAuthenticationConfig.configure(HttpSecurity)", ["non"])
   ; ("void SecurityConfig$AdminAuthenticationConfig.configure(HttpSecurity)", ["non"])
   ; ( "ConnectionFactoryRegistry \
        SecurityConfig$AdminAuthenticationConfig.connectionFactoryRegistry()"
     , ["non"] )
   ; ( "Authentication \
        SecurityConfig$SecurityContextAuthenticationFilter.attemptAuthentication(HttpServletRequest,HttpServletResponse)"
     , ["non"] )
   ; ("Filter SecurityConfig$ApiAuthenticationConfig.githubBasicAuthFilter()", ["non"])
   ; ("boolean SecurityConfig$ApiAuthenticationConfig.isForceHttps()", ["non"])
   ; ("boolean SecurityConfig$AdminAuthenticationConfig.isForceHttps()", ["non"])
   ; ( "InMemoryUsersConnectionRepository \
        SecurityConfig$AdminAuthenticationConfig.inMemoryUsersConnectionRepository(ConnectionFactoryRegistry)"
     , ["non"] )
   ; ("Filter SecurityConfig$SigninAuthenticationConfig.authenticationFilter()", ["non"])
   ; ( "AuthenticationEntryPoint SecurityConfig$AdminAuthenticationConfig.authenticationEntryPoint()"
     , ["non"] )
   ; ("void SecurityConfig$ApiAuthenticationConfig.setEnvironment(Environment)", ["non"])
   ; ("void SecurityConfig$AdminAuthenticationConfig.setEnvironment(Environment)", ["non"])
   ; ("void SecurityConfig$ApiAuthenticationConfig.configure(HttpSecurity)", ["non"])
   ; ( "ProviderSignInController \
        SecurityConfig$AdminAuthenticationConfig.providerSignInController(GitHubConnectionFactory,ConnectionFactoryRegistry,InMemoryUsersConnectionRepository)"
     , ["non"] )
   ; ("void SaganApplication.configureProfiles(ConfigurableEnvironment,String[])", ["non"])
   ; ("void MvcConfig.handleException(ResourceNotFoundException)", ["sin"])
   ; ("void CloudFoundryMvcConfig.addResourceHandlers(ResourceHandlerRegistry)", ["non"])
   ; ("String MvcConfig$ViewRenderingHelper.path()", ["non"])
   ; ("String MvcConfig$ViewRenderingHelper.navClass(String,String)", ["non"])
   ; ( "ThymeleafViewResolverCustomizer \
        CloudFoundryMvcConfig.thymeleafViewResolverCustomizer(ThymeleafViewResolver)"
     , ["non"] )
   ; ("void MvcConfig.addViewControllers(ViewControllerRegistry)", ["non"])
   ; ("ResourceUrlEncodingFilter CloudFoundryMvcConfig.resourceUrlEncodingFilter()", ["non"])
   ; ("void MvcConfig.addInterceptors(InterceptorRegistry)", ["non"])
   ; ("MvcConfig$ViewRenderingHelper MvcConfig.viewRenderingHelper()", ["non"])
   ; ("void MvcConfig$ViewRenderingHelper.setRequest(HttpServletRequest)", ["non"])
   ; ("StaticPagePathFinder MvcConfig.staticPagePathFinder(ResourcePatternResolver)", ["non"])
   ; ("String MvcConfig$ViewRenderingHelper.blogClass(String,String)", ["non"])
   ; ("String CloudFoundryMvcConfig.getGitCommitId()", ["non"])
   ; ( "void MvcConfig$1.postHandle(HttpServletRequest,HttpServletResponse,Object,ModelAndView)"
     , ["non"] )
   ; ("DataSource CloudFoundryDatabaseConfig.dataSource()", ["non"])
   ; ("Cloud CloudFoundryDatabaseConfig.cloud()", ["non"])
   ; ("RedisConnectionFactory CloudFoundryCacheConfig.redisConnectionFactory()", ["non"])
   ; ("CacheManager StandaloneCacheConfig.simpleCacheManager()", ["non"])
   ; ( "CacheManager \
        CloudFoundryCacheConfig.redisCacheManager(RedisConnectionFactory,ObjectMapper,SiteProperties)"
     , ["non"] )
   ; ("void PrettifyVerbatimSerializer.serialize(VerbatimNode,Printer)", ["non"])
   ; ("void PrettifyVerbatimSerializer.printAttribute(Printer,String,String)", ["non"])
   ; ("ResponseEntity MarkupController.renderMarkup(MediaType,String)", ["src"; "sin"])
   ; ("LinkRenderer$Rendering MarkdownToHtmlSerializer.createAnchorLink(String)", ["non"])
   ; ("void MarkdownToHtmlSerializer.visit(HeaderNode)", ["non"])
   ; ("String MarkdownRenderer.renderToHtml(String)", ["non"])
   ; ("boolean MarkdownRenderer.canRender(MediaType)", ["non"])
   ; ("boolean AsciidoctorRenderer.canRender(MediaType)", ["non"])
   ; ("String AsciidoctorRenderer.renderToHtml(String)", ["non"])
   ; ("void PwsGuideContentContributor.contribute(GuideContentResource,File)", ["non"])
   ; ("void ImagesGuideContentContributor.contribute(GuideContentResource,File)", ["non"])
   ; ("void AsciidoctorGuideContentContributor.contribute(GuideContentResource,File)", ["non"])
   ; ("String AsciidoctorGuideContentContributor.findTableOfContents(Document)", ["non"])
   ; ("ResponseEntity GuidesController.renderGuide(String,String)", ["src"; "sin"])
   ; ("Resources GuidesController.listGuides()", ["src"; "sin"])
   ; ("ResponseEntity GuidesController.showGuide(String,String)", ["src"; "sin"])
   ; ("ResponseEntity GuidesController.resourceNotFound()", ["sin"])
   ; ("String GuideType.getSlug()", ["non"])
   ; ("String GuideType.stripPrefix(String)", ["non"])
   ; ("GuideType[] GuideType.values()", ["non"])
   ; ("GuideType GuideType.fromSlug(String)", ["non"])
   ; ("GuideType GuideType.valueOf(String)", ["non"])
   ; ("String GuideType.getPrefix()", ["non"])
   ; ("String GuideType.toString()", ["non"])
   ; ("GuideType GuideType.fromRepositoryName(String)", ["non"])
   ; ("ResourceSupport GuideResourceAssembler.toResource(Object)", ["non"])
   ; ("GuideResource GuideResourceAssembler.toResource(Repository)", ["non"])
   ; ("String GuideResource.getGithubUrl()", ["non"])
   ; ("String GuideResource.getTitle()", ["non"])
   ; ("String GuideResource.getCloneUrl()", ["non"])
   ; ("String[] GuideResource.getProjects()", ["non"])
   ; ("String GuideResource.getRepositoryName()", ["non"])
   ; ("String GuideResource.getSshUrl()", ["non"])
   ; ("GuideType GuideResource.getType()", ["non"])
   ; ("String GuideResource.getDescription()", ["non"])
   ; ("String GuideResource.getName()", ["non"])
   ; ("String GuideResource.getGitUrl()", ["non"])
   ; ("String GuideRenderingException.getRepositoryName()", ["non"])
   ; ("GuideContentResource GuideRenderer.render(GuideType,String)", ["non"])
   ; ("String GuideImage.getName()", ["non"])
   ; ("void GuideImage.setName(String)", ["non"])
   ; ("String GuideImage.getEncodedContent()", ["non"])
   ; ("void GuideImage.setEncodedContent(String)", ["non"])
   ; ("void GuideContentResource.setName(String)", ["non"])
   ; ("String GuideContentResource.getName()", ["non"])
   ; ("String GuideContentResource.getPushToPwsMetadata()", ["non"])
   ; ("String GuideContentResource.getContent()", ["non"])
   ; ("String GuideContentResource.getTableOfContents()", ["non"])
   ; ("void GuideContentResource.setTableOfContents(String)", ["non"])
   ; ("List GuideContentResource.getImages()", ["non"])
   ; ("void GuideContentResource.setContent(String)", ["non"])
   ; ("void GuideContentResource.setPushToPwsMetadata(String)", ["non"])
   ; ("void GuideContentResource.setImages(List)", ["non"])
   ; ("List Repository.getTopics()", ["non"])
   ; ("Long Repository.getId()", ["non"])
   ; ("String Repository.getSshUrl()", ["non"])
   ; ("String Repository.getDescription()", ["non"])
   ; ("String Repository.getCloneUrl()", ["non"])
   ; ("String Repository.getHtmlUrl()", ["non"])
   ; ("String Repository.getName()", ["non"])
   ; ("String Repository.getFullName()", ["non"])
   ; ("String Repository.getGitUrl()", ["non"])
   ; ("String GithubResourceNotFoundException.getResourceName()", ["non"])
   ; ( "ClientHttpResponse \
        GithubClient$GithubAcceptInterceptor.intercept(HttpRequest,byte[],ClientHttpRequestExecution)"
     , ["non"] )
   ; ("List GithubClient.fetchOrgRepositories(String)", ["non"])
   ; ( "ClientHttpResponse \
        GithubClient$GithubAppTokenInterceptor.intercept(HttpRequest,byte[],ClientHttpRequestExecution)"
     , ["non"] )
   ; ("Optional GithubClient.findNextPageLink(ResponseEntity)", ["non"])
   ; ("byte[] GithubClient.downloadRepositoryAsZipball(String,String)", ["non"])
   ; ("Repository GithubClient.fetchOrgRepository(String,String)", ["non"])
   ; ("String RendererProperties$Github.getToken()", ["non"])
   ; ("String RendererProperties$Guides.getOrganization()", ["non"])
   ; ("void RendererProperties$Github.setToken(String)", ["non"])
   ; ("RendererProperties$Github RendererProperties.getGithub()", ["non"])
   ; ("RendererProperties$Guides RendererProperties.getGuides()", ["non"])
   ; ("void RendererProperties$Guides.setOrganization(String)", ["non"])
   ; ("void RendererApplication.main(String[])", ["non"])
   ; ("ResourceSupport IndexController.index()", ["src"; "sin"])
   ; ("Asciidoctor AsciidoctorConfig.asciidoctor()", ["non"]) |]


let sagan_api_solution : solution array =
  [| ( "void AbstractAuthenticationProcessingFilter.setAuthenticationManager(AuthenticationManager)"
     , ["non"] )
   ; ( "void \
        AbstractAuthenticationProcessingFilter.setAuthenticationSuccessHandler(AuthenticationSuccessHandler)"
     , ["non"] )
   ; ("void AbstractAuthenticationTargetUrlRequestHandler.setDefaultTargetUrl(String)", ["non"])
   ; ("void AbstractCacheManager.addCache(Cache)", ["sin"])
   ; ("Cache AbstractCacheManager.getCache(String)", ["src"])
   ; ("Collection AbstractCacheManager.getCacheNames()", ["src"])
   ; ("ServiceConnectionFactory AbstractCloudConfig.connectionFactory()", ["non"])
   ; ("void AbstractFeedView.buildFeedMetadata(Map,WireFeed,HttpServletRequest)", ["non"])
   ; ("HttpSecurityBuilder AbstractHttpConfigurer.disable()", ["san"])
   ; ("Object AbstractRequestMatcherRegistry.anyRequest()", ["non"])
   ; ("Object AbstractRequestMatcherRegistry.antMatchers(HttpMethod,String[])", ["san"])
   ; ("Object AbstractRequestMatcherRegistry.antMatchers(String[])", ["san"])
   ; ("void AbstractUrlBasedView.setUrl(String)", ["non"])
   ; ("Object Alternatives.firstNotNull(Object[])", ["non"])
   ; ("Iterator ArrayList.iterator()", ["non"])
   ; ("Object ArrayList.get(int)", ["non"])
   ; ("boolean ArrayList.add(Object)", ["non"])
   ; ("void ArrayList.forEach(Consumer)", ["non"])
   ; ("List Arrays.asList(Object[])", ["non"])
   ; ("Stream Arrays.stream(Object[])", ["non"])
   ; ("String Asciidoctor.convert(String,OptionsBuilder)", ["non"])
   ; ("void Asciidoctor.convert(Reader,Writer,OptionsBuilder)", ["non"])
   ; ("Asciidoctor Asciidoctor$Factory.create()", ["non"])
   ; ("void Assert.isTrue(boolean,String)", ["san"])
   ; ("void Assert.notNull(Object,String)", ["san"])
   ; ("void Attributes.setAllowUriRead(boolean)", ["non"])
   ; ("void Attributes.setAnchors(boolean)", ["non"])
   ; ("void Attributes.setAttribute(String,Object)", ["non"])
   ; ("void Attributes.setSkipFrontMatter(boolean)", ["non"])
   ; ("Object Authentication.getPrincipal()", ["src"])
   ; ("String Authentication.getName()", ["src"])
   ; ("boolean Authentication.isAuthenticated()", ["src"])
   ; ("List AuthorityUtils.commaSeparatedStringToAuthorityList(String)", ["non"])
   ; ("Base64$Decoder Base64.getDecoder()", ["src"])
   ; ("Base64$Encoder Base64.getEncoder()", ["src"])
   ; ("byte[] Base64$Decoder.decode(String)", ["non"])
   ; ("String Base64$Encoder.encodeToString(byte[])", ["non"])
   ; ("void BiConsumer.accept(Object,Object)", ["non"])
   ; ("boolean BindingResult.hasErrors()", ["src"])
   ; ("void BindingResult.rejectValue(String,String,String)", ["src"])
   ; ("ChainingTextStringParser Biweekly.parse(String)", ["san"])
   ; ("Boolean Boolean.valueOf(boolean)", ["non"])
   ; ("Graphics BufferedImage.getGraphics()", ["src"])
   ; ("CacheControl CacheControl.maxAge(long,TimeUnit)", ["non"])
   ; ("void Category.setLabel(String)", ["non"])
   ; ("void Category.setTerm(String)", ["non"])
   ; ("ICalendar ChainingTextStringParser.first()", ["non"])
   ; ( "ChannelSecurityConfigurer$ChannelRequestMatcherRegistry \
        ChannelSecurityConfigurer$RequiresChannelUrl.requiresSecure()"
     , ["san"] )
   ; ("Charset Charset.forName(String)", ["non"])
   ; ("Annotation Class.getAnnotation(Class)", ["non"])
   ; ("ClassLoader Class.getClassLoader()", ["non"])
   ; ("URL Class.getResource(String)", ["non"])
   ; ("URL ClassLoader.getResource(String)", ["non"])
   ; ("InputStream ClassLoader.getResourceAsStream(String)", ["src"])
   ; ("InputStream ClassPathResource.getInputStream()", ["src"])
   ; ("ClientHttpResponse ClientHttpRequestExecution.execute(HttpRequest,byte[])", ["non"])
   ; ("Object CloneableBean.beanClone(Object,Set)", ["non"])
   ; ("Object Cloud.getServiceConnector(String,Class,ServiceConnectorConfig)", ["src"])
   ; ("Cloud CloudFactory.getCloud()", ["src"])
   ; ("Object[] Collection.toArray(Object[])", ["non"])
   ; ("Stream Collection.stream()", ["non"])
   ; ("List Collections.emptyList()", ["non"])
   ; ("Set Collections.emptySet()", ["non"])
   ; ("Comparator Collections.reverseOrder(Comparator)", ["non"])
   ; ("List Collections.singletonList(Object)", ["non"])
   ; ("List Collections.unmodifiableList(List)", ["non"])
   ; ("Map Collections.singletonMap(Object,Object)", ["non"])
   ; ("Set Collections.singleton(Object)", ["non"])
   ; ("Collector Collectors.toList()", ["non"])
   ; ("Collector Collectors.groupingBy(Function)", ["non"])
   ; ("Comparator Comparator.comparingInt(ToIntFunction)", ["non"])
   ; ("MutablePropertySources ConfigurableEnvironment.getPropertySources()", ["non"])
   ; ("boolean ConfigurableEnvironment.acceptsProfiles(String[])", ["non"])
   ; ("void ConfigurableEnvironment.addActiveProfile(String)", ["non"])
   ; ("ConnectionKey Connection.getKey()", ["src"])
   ; ("Object Connection.getApi()", ["src"])
   ; ("String Connection.getDisplayName()", ["src"])
   ; ("void ConnectionFactoryRegistry.addConnectionFactory(ConnectionFactory)", ["non"])
   ; ("String ConnectionKey.getProviderUserId()", ["src"])
   ; ("Connection ConnectionRepository.findPrimaryConnection(Class)", ["src"])
   ; ("void Content.setType(String)", ["non"])
   ; ("void Content.setValue(String)", ["non"])
   ; ("ControllerLinkBuilder ControllerLinkBuilder.linkTo(Object)", ["non"])
   ; ("Object ControllerLinkBuilder.methodOn(Class,Object[])", ["non"])
   ; ("String DatatypeConverter.printHexBinary(byte[])", ["non"])
   ; ("boolean Date.after(Date)", ["non"])
   ; ("Instant Date.toInstant()", ["non"])
   ; ("String DateFormat.format(Date)", ["non"])
   ; ("Date DateFormat.parse(String)", ["san"])
   ; ("void DateFormat.setTimeZone(TimeZone)", ["non"])
   ; ( "XMLFactoriesConfig \
        DefaultXMLFactoriesConfig.setNamespacePhilosophy(DefaultXMLFactoriesConfig$NamespacePhilosophy)"
     , ["non"] )
   ; ("Element Document.body()", ["non"])
   ; ("Duration Duration.ofMinutes(long)", ["non"])
   ; ("Element Element.parent()", ["non"])
   ; ("Elements Element.children()", ["non"])
   ; ("Set Element.classNames()", ["non"])
   ; ("Elements Element.select(String)", ["non"])
   ; ("String Element.text()", ["non"])
   ; ("Stream Elements.stream()", ["non"])
   ; ("String Elements.toString()", ["non"])
   ; ("Elements Elements.select(String)", ["non"])
   ; ("String Elements.html()", ["non"])
   ; ("void Entry.setAlternateLinks(List)", ["non"])
   ; ("void Entry.setAuthors(List)", ["non"])
   ; ("void Entry.setCategories(List)", ["non"])
   ; ("void Entry.setContents(List)", ["non"])
   ; ("void Entry.setId(String)", ["non"])
   ; ("void Entry.setTitle(String)", ["non"])
   ; ("void Entry.setUpdated(Date)", ["non"])
   ; ("Enum Enum.valueOf(Class,String)", ["non"])
   ; ("String Enum.name()", ["non"])
   ; ("String Enum.toString()", ["non"])
   ; ("boolean Enum.equals(Object)", ["non"])
   ; ("int Enum.ordinal()", ["non"])
   ; ("Object Enumeration.nextElement()", ["non"])
   ; ("boolean Enumeration.hasMoreElements()", ["non"])
   ; ("boolean Environment.acceptsProfiles(String[])", ["non"])
   ; ("boolean EqualsBean.beanEquals(Class,Object,Object)", ["non"])
   ; ("int EqualsBean.beanHashCode(Object)", ["san"])
   ; ( "ExceptionHandlingConfigurer \
        ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)"
     , ["san"] )
   ; ( "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry \
        ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.authenticated()"
     , ["san"] )
   ; ( "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry \
        ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.permitAll()"
     , ["san"] )
   ; ( "HttpSecurityBuilder \
        ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry.and()"
     , ["non"] )
   ; ("void Feed.setAlternateLinks(List)", ["non"])
   ; ("void Feed.setIcon(String)", ["non"])
   ; ("void Feed.setId(String)", ["non"])
   ; ("void Feed.setOtherLinks(List)", ["non"])
   ; ("void Feed.setTitle(String)", ["non"])
   ; ("void Feed.setUpdated(Date)", ["non"])
   ; ("String File.getName()", ["non"])
   ; ("String File.getParent()", ["non"])
   ; ("boolean File.mkdir()", ["sin"])
   ; ("void File.deleteOnExit()", ["sin"])
   ; ("File File.createTempFile(String,String)", ["src"])
   ; ("File[] File.listFiles()", ["src"])
   ; ("String File.getAbsolutePath()", ["src"])
   ; ("boolean File.exists()", ["src"])
   ; ("boolean File.isDirectory()", ["src"])
   ; ("boolean File.isFile()", ["src"])
   ; ("String FileCopyUtils.copyToString(Reader)", ["src"])
   ; ("byte[] FileCopyUtils.copyToByteArray(File)", ["src"])
   ; ("void FileOutputStream.close()", ["non"])
   ; ("void FileOutputStream.write(byte[])", ["sin"])
   ; ("boolean FileSystemUtils.deleteRecursively(File)", ["sin"])
   ; ("void FilterChain.doFilter(ServletRequest,ServletResponse)", ["san"])
   ; ("String FilterConfig.getInitParameter(String)", ["src"])
   ; ("ServletContext FilterConfig.getServletContext()", ["src"])
   ; ("void FilterRegistrationBean.setFilter(Filter)", ["non"])
   ; ("Float Float.valueOf(String)", ["non"])
   ; ("Float Float.valueOf(float)", ["non"])
   ; ("float Float.floatValue()", ["non"])
   ; ("Font Font.deriveFont(int,float)", ["non"])
   ; ("Font Font.createFont(int,InputStream)", ["src"])
   ; ("int FontMetrics.stringWidth(String)", ["non"])
   ; ("Object Function.apply(Object)", ["non"])
   ; ("RestOperations GitHub.restOperations()", ["src"])
   ; ("UserOperations GitHub.userOperations()", ["src"])
   ; ("UserOperations GitHubTemplate.userOperations()", ["src"])
   ; ("Long GitHubUser.getId()", ["non"])
   ; ("String GitHubUser.getAvatarUrl()", ["non"])
   ; ("String GitHubUser.getLogin()", ["non"])
   ; ("String GitHubUser.getName()", ["non"])
   ; ("String GitHubUserProfile.getName()", ["non"])
   ; ("String GitHubUserProfile.getProfileImageUrl()", ["non"])
   ; ("String GitHubUserProfile.getUsername()", ["non"])
   ; ("long GitHubUserProfile.getId()", ["non"])
   ; ("void Graphics.dispose()", ["non"])
   ; ("FontMetrics Graphics.getFontMetrics()", ["non"])
   ; ("void Graphics.setFont(Font)", ["non"])
   ; ("Object HandlerMethod.getBean()", ["non"])
   ; ("int HeaderNode.getLevel()", ["non"])
   ; ("HeadersConfigurer HeadersConfigurer.addHeaderWriter(HeaderWriter)", ["non"])
   ; ("HeadersConfigurer$FrameOptionsConfig HeadersConfigurer.frameOptions()", ["non"])
   ; ("HeadersConfigurer$XXssConfig HeadersConfigurer.xssProtection()", ["san"])
   ; ("HeadersConfigurer$CacheControlConfig HeadersConfigurer.cacheControl()", ["san"])
   ; ("HeadersConfigurer$ContentTypeOptionsConfig HeadersConfigurer.contentTypeOptions()", ["san"])
   ; ("HeadersConfigurer HeadersConfigurer$CacheControlConfig.and()", ["non"])
   ; ("HeadersConfigurer HeadersConfigurer$ContentTypeOptionsConfig.and()", ["non"])
   ; ("HeadersConfigurer HeadersConfigurer$XXssConfig.and()", ["non"])
   ; ("Hop Hop.rel(String)", ["non"])
   ; ("Hop Hop.withParameter(String,Object)", ["non"])
   ; ("void HstsHeaderWriter.setRequestMatcher(RequestMatcher)", ["san"])
   ; ("CloseableHttpClient HttpClientBuilder.build()", ["non"])
   ; ("HttpClientBuilder HttpClientBuilder.create()", ["non"])
   ; ("Object HttpEntity.getBody()", ["non"])
   ; ("HttpHeaders HttpEntity.getHeaders()", ["src"])
   ; ("List HttpHeaders.get(Object)", ["non"])
   ; ("void HttpHeaders.set(String,String)", ["non"])
   ; ("void HttpHeaders.setAccept(List)", ["non"])
   ; ("void HttpHeaders.setContentType(MediaType)", ["non"])
   ; ("HttpHeaders HttpRequest.getHeaders()", ["src"])
   ; ("AnonymousConfigurer HttpSecurity.anonymous()", ["non"])
   ; ("HttpSecurity HttpSecurity.addFilterAfter(Filter,Class)", ["non"])
   ; ("HttpSecurity HttpSecurity.addFilterBefore(Filter,Class)", ["non"])
   ; ("CsrfConfigurer HttpSecurity.csrf()", ["san"])
   ; ("ExceptionHandlingConfigurer HttpSecurity.exceptionHandling()", ["san"])
   ; ( "ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry \
        HttpSecurity.authorizeRequests()"
     , ["san"] )
   ; ("HttpSecurity$RequestMatcherConfigurer HttpSecurity.requestMatchers()", ["san"])
   ; ( "ChannelSecurityConfigurer$ChannelRequestMatcherRegistry HttpSecurity.requiresChannel()"
     , ["san"] )
   ; ("HeadersConfigurer HttpSecurity.headers()", ["san"])
   ; ("LogoutConfigurer HttpSecurity.logout()", ["san"])
   ; ("HttpSecurity HttpSecurity$RequestMatcherConfigurer.and()", ["non"])
   ; ("String HttpServletRequest.getRequestURI()", ["src"])
   ; ("String HttpServletRequest.getServerName()", ["src"])
   ; ("StringBuffer HttpServletRequest.getRequestURL()", ["src"])
   ; ("void HttpServletResponse.setCharacterEncoding(String)", ["non"])
   ; ("List ICalendar.getEvents()", ["src"])
   ; ( "ConnectionRepository InMemoryUsersConnectionRepository.createConnectionRepository(String)"
     , ["non"] )
   ; ("void InMemoryUsersConnectionRepository.setConnectionSignUp(ConnectionSignUp)", ["non"])
   ; ("void InputStream.close()", ["non"])
   ; ("Instant Instant.minus(TemporalAmount)", ["non"])
   ; ("ZonedDateTime Instant.atZone(ZoneId)", ["non"])
   ; ("OptionalInt IntStream.max()", ["non"])
   ; ("Integer Integer.valueOf(int)", ["non"])
   ; ("InterceptorRegistration InterceptorRegistry.addInterceptor(HandlerInterceptor)", ["non"])
   ; ("void Iterable.forEach(Consumer)", ["non"])
   ; ("Object Iterator.next()", ["non"])
   ; ("void Iterator.remove()", ["non"])
   ; ("boolean Iterator.hasNext()", ["non"])
   ; ("void Jackson2JsonRedisSerializer.setObjectMapper(ObjectMapper)", ["non"])
   ; ("Document Jsoup.parse(String)", ["san"])
   ; ("Link LinkBuilderSupport.withRel(String)", ["non"])
   ; ("Link LinkBuilderSupport.withSelfRel()", ["non"])
   ; ("LinkRenderer$Rendering LinkRenderer$Rendering.withAttribute(String,String)", ["non"])
   ; ("Iterator ArrayList.iterator()", ["non"])
   ; ("ArrayList ArrayList.subList(int,int)", ["non"])
   ; ("Object ArrayList.get(int)", ["non"])
   ; ("Object ArrayList.remove(int)", ["non"])
   ; ("Object[] ArrayList.toArray(Object[])", ["non"])
   ; ("boolean ArrayList.add(Object)", ["non"])
   ; ("boolean ArrayList.addAll(Collection)", ["non"])
   ; ("boolean ArrayList.contains(Object)", ["non"])
   ; ("boolean ArrayList.isEmpty()", ["non"])
   ; ("boolean ArrayList.removeAll(Collection)", ["non"])
   ; ("int ArrayList.size()", ["non"])
   ; ("void ArrayList.sort(Comparator)", ["non"])
   ; ("Object ArrayList.set(int,Object)", ["non"])
   ; ("LocalDate LocalDate.plusDays(long)", ["non"])
   ; ("String LocalDate.toString()", ["non"])
   ; ("String LocalDate.toString(String)", ["non"])
   ; ("boolean LocalDate.equals(Object)", ["non"])
   ; ("int LocalDate.compareTo(ChronoLocalDate)", ["non"])
   ; ("LocalDate LocalDate.parse(CharSequence)", ["san"])
   ; ("LocalDate LocalDate.now()", ["src"])
   ; ("boolean LocalDate.isAfter(ChronoLocalDate)", ["non"])
   ; ("boolean LocalDate.isBefore(ChronoLocalDate)", ["non"])
   ; ("void Log.error(Object)", ["sin"])
   ; ("void Log.error(Object,Throwable)", ["sin"])
   ; ("void Log.info(Object)", ["sin"])
   ; ("void Log.warn(Object)", ["sin"])
   ; ("Log LogFactory.getLog(Class)", ["src"])
   ; ("void Logger.error(String,Throwable)", ["sin"])
   ; ("void Logger.info(String)", ["sin"])
   ; ("void Logger.info(String,Object)", ["sin"])
   ; ("void Logger.warn(String)", ["sin"])
   ; ("Logger LoggerFactory.getLogger(Class)", ["src"])
   ; ("void LoginUrlAuthenticationEntryPoint.setForceHttps(boolean)", ["san"])
   ; ("LogoutConfigurer LogoutConfigurer.logoutRequestMatcher(RequestMatcher)", ["san"])
   ; ("LogoutConfigurer LogoutConfigurer.logoutSuccessUrl(String)", ["san"])
   ; ("Long Long.valueOf(String)", ["non"])
   ; ("Long Long.valueOf(long)", ["non"])
   ; ("String Long.toString()", ["non"])
   ; ("boolean Long.equals(Object)", ["non"])
   ; ("int Long.compareTo(Long)", ["non"])
   ; ("int Long.hashCode()", ["san"])
   ; ("long Long.longValue()", ["non"])
   ; ("void Mac.init(Key)", ["non"])
   ; ("byte[] Mac.doFinal(byte[])", ["san"])
   ; ("Mac Mac.getInstance(String)", ["src"])
   ; ("Object Map.get(Object)", ["non"])
   ; ("Object Map.put(Object,Object)", ["non"])
   ; ("boolean Map.containsKey(Object)", ["non"])
   ; ("void Map.forEach(BiConsumer)", ["non"])
   ; ("Matcher Matcher.appendReplacement(StringBuffer,String)", ["non"])
   ; ("StringBuffer Matcher.appendTail(StringBuffer)", ["non"])
   ; ("boolean Matcher.find()", ["san"])
   ; ("String Matcher.group()", ["non"])
   ; ("String Matcher.group(int)", ["non"])
   ; ("boolean Matcher.matches()", ["san"])
   ; ("int Math.min(int,int)", ["non"])
   ; ("long Math.min(long,long)", ["non"])
   ; ("long Math.max(long,long)", ["non"])
   ; ("MediaType MediaType.parseMediaType(String)", ["san"])
   ; ("boolean MediaType.isCompatibleWith(MediaType)", ["non"])
   ; ("String MessageDigestPasswordEncoder.encodePassword(String,Object)", ["san"])
   ; ("Model Model.addAttribute(String,Object)", ["sin"])
   ; ("ModelAndView ModelAndView.addObject(String,Object)", ["non"])
   ; ("void MutablePropertySources.addLast(PropertySource)", ["non"])
   ; ("String Node.attr(String)", ["non"])
   ; ("String Node.outerHtml()", ["non"])
   ; ("void Node.remove()", ["non"])
   ; ("void OAuth2ConnectionFactory.setScope(String)", ["non"])
   ; ("Class Object.getClass()", ["non"])
   ; ("Object Object.clone()", ["non"])
   ; ("String Object.toString()", ["non"])
   ; ("boolean Object.equals(Object)", ["non"])
   ; ("int Object.hashCode()", ["san"])
   ; ("Object ObjectMapper.readValue(String,Class)", ["san"])
   ; ("boolean Objects.equals(Object,Object)", ["non"])
   ; ("int Objects.hash(Object[])", ["san"])
   ; ("Object Optional.get()", ["non"])
   ; ("Object Optional.orElse(Object)", ["non"])
   ; ("Optional Optional.empty()", ["non"])
   ; ("Optional Optional.flatMap(Function)", ["non"])
   ; ("Optional Optional.of(Object)", ["non"])
   ; ("boolean Optional.isPresent()", ["non"])
   ; ("Optional Optional.map(Function)", ["non"])
   ; ("int OptionalInt.orElse(int)", ["non"])
   ; ("OptionsBuilder OptionsBuilder.attributes(Attributes)", ["non"])
   ; ("OptionsBuilder OptionsBuilder.baseDir(File)", ["non"])
   ; ("OptionsBuilder OptionsBuilder.headerFooter(boolean)", ["non"])
   ; ("OptionsBuilder OptionsBuilder.options()", ["non"])
   ; ("OptionsBuilder OptionsBuilder.safe(SafeMode)", ["non"])
   ; ("Iterator Page.iterator()", ["non"])
   ; ("Sort Page.getSort()", ["non"])
   ; ("boolean Page.isFirst()", ["non"])
   ; ("int Page.getNumber()", ["non"])
   ; ("int Page.getSize()", ["non"])
   ; ("int Page.getTotalPages()", ["non"])
   ; ("long Page.getTotalElements()", ["non"])
   ; ("List Page.getContent()", ["src"])
   ; ("Pattern Pattern.compile(String)", ["non"])
   ; ("String Pattern.quote(String)", ["non"])
   ; ("Matcher Pattern.matcher(CharSequence)", ["non"])
   ; ("RootNode PegDownProcessor.parseMarkdown(char[])", ["san"])
   ; ("void Person.setName(String)", ["non"])
   ; ("Object PostRepository.save(Object)", ["sin"])
   ; ("void PostRepository.delete(Object)", ["sin"])
   ; ("List PostRepository.findAll()", ["src"])
   ; ("Object PostRepository.findOne(Serializable)", ["src"])
   ; ("Page PostRepository.findAll(Pageable)", ["src"])
   ; ("boolean Predicate.test(Object)", ["non"])
   ; ("String Principal.getName()", ["src"])
   ; ("Printer Printer.print(String)", ["non"])
   ; ("Printer Printer.print(char)", ["non"])
   ; ("Printer Printer.printEncoded(String)", ["non"])
   ; ("Printer Printer.println()", ["non"])
   ; ("List ProjectGroupRepository.findAll()", ["src"])
   ; ("Object ProjectMetadataRepository.save(Object)", ["sin"])
   ; ("void ProjectMetadataRepository.delete(Serializable)", ["sin"])
   ; ("List ProjectMetadataRepository.findAll(Sort)", ["src"])
   ; ("Object ProjectMetadataRepository.findOne(Serializable)", ["src"])
   ; ("XBUrlIO ProjectionIO.url(String)", ["non"])
   ; ("String Properties.getProperty(String)", ["non"])
   ; ("Properties PropertiesLoaderUtils.loadProperties(Resource)", ["non"])
   ; ("void ProviderSignInController.setSignInUrl(String)", ["non"])
   ; ("void RedirectView.setStatusCode(HttpStatus)", ["non"])
   ; ("void RedisAccessor.setConnectionFactory(RedisConnectionFactory)", ["non"])
   ; ("byte[] RedisCachePrefix.prefix(String)", ["src"])
   ; ("void RedisTemplate.afterPropertiesSet()", ["non"])
   ; ("void RedisTemplate.setHashKeySerializer(RedisSerializer)", ["non"])
   ; ("void RedisTemplate.setHashValueSerializer(RedisSerializer)", ["non"])
   ; ("void RedisTemplate.setKeySerializer(RedisSerializer)", ["non"])
   ; ("void RedisTemplate.setValueSerializer(RedisSerializer)", ["non"])
   ; ("void RegistrationBean.addInitParameter(String,String)", ["non"])
   ; ("void RegistrationBean.setName(String)", ["non"])
   ; ("RequestAttributes RequestContextHolder.currentRequestAttributes()", ["non"])
   ; ("URL Resource.getURL()", ["src"])
   ; ("boolean Resource.exists()", ["src"])
   ; ("List ResourceAssemblerSupport.toResources(Iterable)", ["non"])
   ; ("ResourceChainRegistration ResourceChainRegistration.addResolver(ResourceResolver)", ["non"])
   ; ( "ResourceHandlerRegistration ResourceHandlerRegistration.addResourceLocations(String[])"
     , ["non"] )
   ; ("ResourceChainRegistration ResourceHandlerRegistration.resourceChain(boolean)", ["non"])
   ; ("ResourceHandlerRegistration ResourceHandlerRegistry.addResourceHandler(String[])", ["non"])
   ; ("Resource ResourcePatternResolver.getResource(String)", ["src"])
   ; ("Resource[] ResourcePatternResolver.getResources(String)", ["src"])
   ; ("void ResourceSupport.add(Link)", ["non"])
   ; ("Collection Resources.getContent()", ["src"])
   ; ("HttpStatus ResponseEntity.getStatusCode()", ["non"])
   ; ("ResponseEntity ResponseEntity.ok(Object)", ["non"])
   ; ("ResponseEntity$BodyBuilder ResponseEntity.badRequest()", ["non"])
   ; ("ResponseEntity$BodyBuilder ResponseEntity.ok()", ["non"])
   ; ("ResponseEntity$BodyBuilder ResponseEntity.status(HttpStatus)", ["non"])
   ; ("ResponseEntity$HeadersBuilder ResponseEntity.notFound()", ["non"])
   ; ("ResponseEntity ResponseEntity$BodyBuilder.body(Object)", ["non"])
   ; ("ResponseEntity ResponseEntity$BodyBuilder.build()", ["non"])
   ; ("ResponseEntity$HeadersBuilder ResponseEntity$BodyBuilder.eTag(String)", ["non"])
   ; ("ResponseEntity$HeadersBuilder ResponseEntity$BodyBuilder.cacheControl(CacheControl)", ["san"])
   ; ("ResponseEntity ResponseEntity$HeadersBuilder.build()", ["non"])
   ; ("Object RestOperations.getForObject(String,Class,Object[])", ["src"; "sin"])
   ; ("Object RestOperations.postForObject(String,Object,Class,Object[])", ["src"; "sin"])
   ; ("ResponseEntity RestOperations.getForEntity(String,Class,Object[])", ["src"; "sin"])
   ; ("Object RestTemplate.getForObject(String,Class,Object[])", ["src"; "sin"])
   ; ("Object RestTemplate.postForObject(String,Object,Class,Object[])", ["src"; "sin"])
   ; ("ResponseEntity RestTemplate.getForEntity(String,Class,Object[])", ["src"; "sin"])
   ; ("RestTemplate RestTemplateBuilder.build()", ["non"])
   ; ( "RestTemplateBuilder \
        RestTemplateBuilder.additionalInterceptors(ClientHttpRequestInterceptor[])"
     , ["non"] )
   ; ("RestTemplateBuilder RestTemplateBuilder.messageConverters(Collection)", ["non"])
   ; ("RestTemplateBuilder RestTemplateBuilder.rootUri(String)", ["non"])
   ; ("SecurityBuilder SecurityConfigurerAdapter.and()", ["non"])
   ; ("Authentication SecurityContext.getAuthentication()", ["non"])
   ; ("void SecurityContext.setAuthentication(Authentication)", ["non"])
   ; ("SecurityContext SecurityContextHolder.getContext()", ["src"])
   ; ("RedisConnectionFactory ServiceConnectionFactory.redisConnectionFactory()", ["non"])
   ; ("HttpServletRequest ServletRequestAttributes.getRequest()", ["non"])
   ; ("boolean Set.add(Object)", ["non"])
   ; ("boolean Set.addAll(Collection)", ["non"])
   ; ("boolean Set.contains(Object)", ["non"])
   ; ("void SimpleCacheManager.setCaches(Collection)", ["non"])
   ; ("void SpringApplication.configureProfiles(ConfigurableEnvironment,String[])", ["non"])
   ; ("ConfigurableApplicationContext SpringApplication.run(Class,String[])", ["non"])
   ; ("ConfigurableApplicationContext SpringApplication.run(String[])", ["non"])
   ; ("Object SpringToolsPlatformRepository.save(Object)", ["sin"])
   ; ("void SpringToolsPlatformRepository.delete(Serializable)", ["sin"])
   ; ("List SpringToolsPlatformRepository.findAll()", ["src"])
   ; ("Object SpringToolsPlatformRepository.findOne(Serializable)", ["src"])
   ; ("Object Stream.collect(Collector)", ["non"])
   ; ("Object[] Stream.toArray(IntFunction)", ["non"])
   ; ("Optional Stream.findFirst()", ["non"])
   ; ("Stream Stream.filter(Predicate)", ["non"])
   ; ("boolean Stream.anyMatch(Predicate)", ["non"])
   ; ("void Stream.forEach(Consumer)", ["non"])
   ; ("IntStream Stream.mapToInt(ToIntFunction)", ["non"])
   ; ("Stream Stream.map(Function)", ["non"])
   ; ("Stream Stream.sorted()", ["non"])
   ; ("int StreamUtils.copy(InputStream,OutputStream)", ["src"; "sin"])
   ; ("String StreamUtils.copyToString(InputStream,Charset)", ["src"])
   ; ("byte[] StreamUtils.copyToByteArray(InputStream)", ["src"])
   ; ("String String.concat(String)", ["non"])
   ; ("String String.format(Locale,String,Object[])", ["non"])
   ; ("String String.format(String,Object[])", ["non"])
   ; ("String String.join(CharSequence,Iterable)", ["non"])
   ; ("String String.replace(CharSequence,CharSequence)", ["non"])
   ; ("String String.replace(char,char)", ["non"])
   ; ("String String.replaceAll(String,String)", ["non"])
   ; ("String String.replaceFirst(String,String)", ["non"])
   ; ("String String.substring(int)", ["non"])
   ; ("String String.substring(int,int)", ["non"])
   ; ("String String.toLowerCase()", ["non"])
   ; ("String String.trim()", ["non"])
   ; ("boolean String.contains(CharSequence)", ["non"])
   ; ("boolean String.endsWith(String)", ["non"])
   ; ("boolean String.equals(Object)", ["non"])
   ; ("boolean String.equalsIgnoreCase(String)", ["non"])
   ; ("boolean String.isEmpty()", ["non"])
   ; ("byte[] String.getBytes()", ["non"])
   ; ("byte[] String.getBytes(Charset)", ["non"])
   ; ("char String.charAt(int)", ["non"])
   ; ("char[] String.toCharArray()", ["non"])
   ; ("int String.compareTo(String)", ["non"])
   ; ("int String.lastIndexOf(String)", ["non"])
   ; ("int String.length()", ["non"])
   ; ("String[] String.split(String)", ["non"])
   ; ("boolean String.matches(String)", ["non"])
   ; ("boolean String.startsWith(String)", ["non"])
   ; ("int String.hashCode()", ["san"])
   ; ("int String.indexOf(String)", ["non"])
   ; ("String StringBuffer.toString()", ["non"])
   ; ("String StringBuilder.toString()", ["non"])
   ; ("StringBuilder StringBuilder.append(Object)", ["non"])
   ; ("StringBuilder StringBuilder.append(String)", ["non"])
   ; ("StringBuilder StringBuilder.append(char)", ["non"])
   ; ("StringBuilder StringBuilder.append(int)", ["non"])
   ; ("StringBuilder StringBuilder.append(long)", ["non"])
   ; ("Set StringUtils.commaDelimitedListToSet(String)", ["non"])
   ; ("String StringUtils.arrayToCommaDelimitedString(Object[])", ["non"])
   ; ("String StringUtils.arrayToDelimitedString(Object[],String)", ["non"])
   ; ("String[] StringUtils.tokenizeToStringArray(String,String)", ["non"])
   ; ("boolean StringUtils.hasText(String)", ["non"])
   ; ("boolean StringUtils.isEmpty(Object)", ["non"])
   ; ("boolean StringUtils.isEmpty(String)", ["non"])
   ; ("String StringWriter.toString()", ["non"])
   ; (* ("String System.clearProperty(String)", []); *)
     ("String System.getProperty(String)", ["src"])
   ; ("long System.currentTimeMillis()", ["src"])
   ; (* ("String System.setProperty(String,String)", []); *)
     ("Object TeamRepository.save(Object)", ["sin"])
   ; ("String TextNode.getText()", ["non"])
   ; ("String Throwable.getMessage()", ["non"])
   ; ("void Throwable.addSuppressed(Throwable)", ["non"])
   ; ("void ThymeleafViewResolver.addStaticVariable(String,Object)", ["non"])
   ; ("TimeZone TimeZone.getTimeZone(String)", ["non"])
   ; ("String ToHtmlSerializer.printChildrenToString(SuperNode)", ["non"])
   ; ("String ToHtmlSerializer.toHtml(RootNode)", ["non"])
   ; ("void ToHtmlSerializer.visitChildren(SuperNode)", ["non"])
   ; ("void ToHtmlSerializer.printLink(LinkRenderer$Rendering)", ["non"])
   ; ("String ToStringBean.toString(Class,Object)", ["non"])
   ; ("List Traverson.getDefaultMessageConverters(MediaType[])", ["non"])
   ; ("Traverson$TraversalBuilder Traverson.follow(String[])", ["non"])
   ; ("Traverson Traverson.setRestOperations(RestOperations)", ["non"])
   ; ("Link Traverson$TraversalBuilder.asLink()", ["non"])
   ; ("Traverson$TraversalBuilder Traverson$TraversalBuilder.follow(Hop)", ["non"])
   ; ("Traverson$TraversalBuilder Traverson$TraversalBuilder.follow(String[])", ["non"])
   ; ("Object Traverson$TraversalBuilder.toObject(Class)", ["src"])
   ; ("Object Traverson$TraversalBuilder.toObject(ParameterizedTypeReference)", ["src"])
   ; ("String URI.toString()", ["non"])
   ; ("URI URI.create(String)", ["non"])
   ; ("String URL.getPath()", ["non"])
   ; ("String URL.toString()", ["non"])
   ; ("InputStream URL.openStream()", ["src"])
   ; ("String UriComponentsBuilder.toUriString()", ["non"])
   ; ("UriComponentsBuilder UriComponentsBuilder.fromHttpUrl(String)", ["san"])
   ; ("UriComponentsBuilder UriComponentsBuilder.queryParam(String,Object[])", ["non"])
   ; ("String UrlPathHelper.getPathWithinApplication(HttpServletRequest)", ["non"])
   ; ("void UrlRewriteFilter.checkConf(Conf)", ["non"])
   ; ("GitHubUserProfile UserOperations.getUserProfile()", ["src"])
   ; ("DateEnd VEvent.getDateEnd()", ["non"])
   ; ("DateStart VEvent.getDateStart()", ["non"])
   ; ("Description VEvent.getDescription()", ["non"])
   ; ("Location VEvent.getLocation()", ["non"])
   ; ("Summary VEvent.getSummary()", ["non"])
   ; ("Object ValuedProperty.getValue()", ["non"])
   ; ("String VerbatimNode.getType()", ["non"])
   ; ("VersionResourceResolver VersionResourceResolver.addContentVersionStrategy(String[])", ["non"])
   ; ( "VersionResourceResolver VersionResourceResolver.addFixedVersionStrategy(String,String[])"
     , ["non"] )
   ; ("void ViewControllerRegistration.setViewName(String)", ["non"])
   ; ("ViewControllerRegistration ViewControllerRegistry.addViewController(String)", ["non"])
   ; ("ProjectionIO XBProjector.io()", ["non"])
   ; ("Object XBUrlIO.read(Class)", ["src"])
   ; ("Object Yaml.load(String)", ["san"])
   ; ("String YearMonth.toString(String)", ["non"])
   ; ("String ZipEntry.getName()", ["non"])
   ; ("boolean ZipEntry.isDirectory()", ["non"])
   ; ("void ZipFile.close()", ["non"])
   ; ("Enumeration ZipFile.entries()", ["src"])
   ; ("InputStream ZipFile.getInputStream(ZipEntry)", ["src"])
   ; ("ZoneId ZoneId.systemDefault()", ["src"])
   ; ("LocalDate ZonedDateTime.toLocalDate()", ["non"])
   ; ("void Link.setHref(String)", ["non"])
   ; ("String Link.getText()", ["non"])
   ; ("String Link.getHref()", ["non"])
   ; ("void Link.setRel(String)", ["non"]) |]


let sagan_interface_solution : solution array =
  [|("void GuideContentContributor.contribute(GuideContentResource,File)", ["non"])|]
