open ListMonad
open InfixOperators

let java_none_methods_datastructure =
  [| ("BeanContext", "addBeanContextMembershipListener")
   ; ("BeanContext", "removeBeanContextMembershipListener")
   ; ("BeanContextServices", "addService")
   ; ("BeanContextServices", "addBeanContextServicesListener")
   ; ("BeanContextServices", "removeBeanContextServicesListener")
   ; ("BlockingDeque", "add")
   ; ("BlockingDeque", "offer")
   ; ("BlockingDeque", "offerFirst")
   ; ("BlockingDeque", "offerLast")
   ; ("BlockingDeque", "remove")
   ; ("BlockingDeque", "removeFirstOccurrence")
   ; ("BlockingDeque", "removeLastOccurrence")
   ; ("BlockingDeque", "addFirst")
   ; ("BlockingDeque", "addLast")
   ; ("BlockingDeque", "push")
   ; ("BlockingDeque", "put")
   ; ("BlockingDeque", "putFirst")
   ; ("BlockingDeque", "putLast")
   ; ("BlockingQueue", "add")
   ; ("BlockingQueue", "offer")
   ; ("BlockingQueue", "remove")
   ; ("BlockingQueue", "drainTo")
   ; ("BlockingQueue", "put")
   ; ("Deque", "add")
   ; ("Deque", "offer")
   ; ("Deque", "offerFirst")
   ; ("Deque", "offerLast")
   ; ("Deque", "remove")
   ; ("Deque", "removeFirstOccurrence")
   ; ("Deque", "removeLastOccurrence")
   ; ("Deque", "addFirst")
   ; ("Deque", "addLast")
   ; ("Deque", "push")
   ; ("List", "add")
   ; ("List", "addAll")
   ; ("List", "remove")
   ; ("List", "removeAll")
   ; ("List", "retainAll")
   ; ("List", "replaceAll")
   ; ("List", "sort")
   ; ("List", "add")
   ; ("Queue", "add")
   ; ("Queue", "offer")
   ; ("Set", "add")
   ; ("Set", "addAll")
   ; ("Set", "remove")
   ; ("Set", "removeAll")
   ; ("Set", "retainAll")
   ; ("AbstractCollection", "add")
   ; ("AbstractCollection", "addAll")
   ; ("AbstractCollection", "remove")
   ; ("AbstractCollection", "removeAll")
   ; ("AbstractCollection", "retainAll")
   ; ("AbstractList", "add")
   ; ("AbstractList", "addAll")
   ; ("AbstractList", "removeRange")
   ; ("AbstractQueue", "add")
   ; ("AbstractQueue", "addAll")
   ; ("AbstractSequentialList", "addAll")
   ; ("AbstractSequentialList", "add")
   ; ("AbstractSet", "removeAll")
   ; ("ArrayBlockingQueue", "add")
   ; ("ArrayBlockingQueue", "offer")
   ; ("ArrayBlockingQueue", "offer")
   ; ("ArrayBlockingQueue", "remove")
   ; ("ArrayBlockingQueue", "drainTo")
   ; ("ArrayBlockingQueue", "clear")
   ; ("ArrayBlockingQueue", "put")
   ; ("ArrayDeque", "add")
   ; ("ArrayDeque", "offer")
   ; ("ArrayDeque", "offerFirst")
   ; ("ArrayDeque", "offerLast")
   ; ("ArrayDeque", "remove")
   ; ("ArrayDeque", "removeFirstOccurrence")
   ; ("ArrayDeque", "removeLastOccurrence")
   ; ("ArrayDeque", "addFirst")
   ; ("ArrayDeque", "push")
   ; ("ArrayList", "add")
   ; ("ArrayList", "addAll")
   ; ("ArrayList", "remove")
   ; ("ArrayList", "removeAll")
   ; ("ArrayList", "removeIf")
   ; ("ArrayList", "retainAll")
   ; ("ArrayList", "add")
   ; ("ArrayList", "clear")
   ; ("ArrayList", "ensureCapacity")
   ; ("ArrayList", "forEach")
   ; ("ArrayList", "replaceAll")
   ; ("ArrayList", "sort")
   ; ("ArrayList", "trimToSize")
   ; ("ArrayList", "get")
   ; ("ArrayList", "iterator")
   ; ("AttributeList", "add")
   ; ("AttributeList", "addAll")
   ; ("AttributeList", "set")
   ; ("BeanContextServicesSupport", "addService")
   ; ("BeanContextServicesSupport", "addBeanContextServicesListener")
   ; ("BeanContextServicesSupport", "initialize")
   ; ("BeanContextServicesSupport", "releaseService")
   ; ("BeanContextServicesSupport", "removeBeanContextServicesListener")
   ; ("BeanContextServicesSupport", "revokeService")
   ; ("BeanContextServicesSupport", "serviceAvailable")
   ; ("BeanContextServicesSupport", "serviceRevoked")
   ; ("BeanContextSupport", "add")
   ; ("BeanContextSupport", "addAll")
   ; ("BeanContextSupport", "remove")
   ; ("BeanContextSupport", "removeAll")
   ; ("BeanContextSupport", "retainAll")
   ; ("BeanContextSupport", "remove")
   ; ("BeanContextSupport", "validatePendingAdd")
   ; ("BeanContextSupport", "validatePendingRemove")
     (* ; ("BeanContextSupport", "bcsPreDeserializationHook") *)
     (* ; ("BeanContextSupport", "bcsPreSerializationHook") *)
   ; ("BeanContextSupport", "childDeserializedHook")
   ; ("BeanContextSupport", "childJustAddedHook")
   ; ("BeanContextSupport", "childJustRemovedHook") (* ; ("BeanContextSupport", "deserialize") *)
   ; ("BeanContextSupport", "fireChildrenAdded")
   ; ("BeanContextSupport", "fireChildrenRemoved")
   ; ("BeanContextSupport", "initialize") (* ; ("BeanContextSupport", "serialize") *)
   ; ("BeanContextSupport", "addBeanContextMembershipListener")
   ; ("BeanContextSupport", "clear")
   ; ("BeanContextSupport", "dontUseGui")
   ; ("BeanContextSupport", "okToUseGui")
   ; ("BeanContextSupport", "propertyChange") (* ; ("BeanContextSupport", "readChildren") *)
   ; ("BeanContextSupport", "removeBeanContextMembershipListener")
   ; ("BeanContextSupport", "setDesignTime")
   ; ("BeanContextSupport", "setLocale")
   ; ("BeanContextSupport", "vetoableChange") (* ; ("BeanContextSupport", "writeChildren") *)
   ; ("ConcurrentHashMap", "add")
   ; ("ConcurrentHashMap", "addAll")
   ; ("ConcurrentHashMap", "isEmpty")
   ; ("ConcurrentHashMap", "remove")
   ; ("ConcurrentHashMap", "removeAll")
   ; ("ConcurrentHashMap", "retainAll")
   ; ("ConcurrentHashMap", "clear")
   ; ("ConcurrentHashMap", "forEach")
   ; ("ConcurrentLinkedDeque", "add")
   ; ("ConcurrentLinkedDeque", "addAll")
   ; ("ConcurrentLinkedDeque", "offer")
   ; ("ConcurrentLinkedDeque", "offerFirst")
   ; ("ConcurrentLinkedDeque", "offerLast")
   ; ("ConcurrentLinkedDeque", "remove")
   ; ("ConcurrentLinkedDeque", "removeFirstOccurrence")
   ; ("ConcurrentLinkedDeque", "removeLastOccurrence")
   ; ("ConcurrentLinkedDeque", "addFirst")
   ; ("ConcurrentLinkedDeque", "addLast")
   ; ("ConcurrentLinkedDeque", "clear")
   ; ("ConcurrentLinkedDeque", "push")
   ; ("ConcurrentLinkedQueue", "add")
   ; ("ConcurrentLinkedQueue", "addAll")
   ; ("ConcurrentLinkedQueue", "offer")
   ; ("ConcurrentLinkedQueue", "remove")
   ; ("ConcurrentSkipListSet", "add")
   ; ("ConcurrentSkipListSet", "remove")
   ; ("ConcurrentSkipListSet", "removeAll")
   ; ("ConcurrentSkipListSet", "clear")
   ; ("CopyOnWriteArrayList", "add")
   ; ("CopyOnWriteArrayList", "addAll")
   ; ("CopyOnWriteArrayList", "addAll")
   ; ("CopyOnWriteArrayList", "addIfAbsent")
   ; ("CopyOnWriteArrayList", "remove")
   ; ("CopyOnWriteArrayList", "removeAll")
   ; ("CopyOnWriteArrayList", "removeIf")
   ; ("CopyOnWriteArrayList", "retainAll")
   ; ("CopyOnWriteArrayList", "add")
   ; ("CopyOnWriteArrayList", "clear")
   ; ("CopyOnWriteArrayList", "forEach")
   ; ("CopyOnWriteArrayList", "replaceAll")
   ; ("CopyOnWriteArrayList", "sort")
   ; ("CopyOnWriteArraySet", "add")
   ; ("CopyOnWriteArraySet", "addAll")
   ; ("CopyOnWriteArraySet", "remove")
   ; ("CopyOnWriteArraySet", "removeAll")
   ; ("CopyOnWriteArraySet", "removeIf")
   ; ("CopyOnWriteArraySet", "retainAll")
   ; ("CopyOnWriteArraySet", "clear")
   ; ("CopyOnWriteArraySet", "forEach")
   ; ("DelayQueue", "add")
   ; ("DelayQueue", "offer")
   ; ("DelayQueue", "offer")
   ; ("DelayQueue", "remove")
   ; ("DelayQueue", "drainTo")
   ; ("DelayQueue", "drainTo")
   ; ("DelayQueue", "clear")
   ; ("DelayQueue", "put")
   ; ("HashSet", "add")
   ; ("HashSet", "remove")
   ; ("JobStateReasons", "add")
   ; ("LinkedBlockingDeque", "add")
   ; ("LinkedBlockingDeque", "offer")
   ; ("LinkedBlockingDeque", "offerFirst")
   ; ("LinkedBlockingDeque", "offerLast")
   ; ("LinkedBlockingDeque", "remove")
   ; ("LinkedBlockingDeque", "removeFirstOccurrence")
   ; ("LinkedBlockingDeque", "removeLastOccurrence")
   ; ("LinkedBlockingDeque", "drainTo")
   ; ("LinkedBlockingDeque", "addFirst")
   ; ("LinkedBlockingDeque", "addLast")
   ; ("LinkedBlockingDeque", "clear")
   ; ("LinkedBlockingDeque", "push")
   ; ("LinkedBlockingDeque", "put")
   ; ("LinkedBlockingDeque", "putFirst")
   ; ("LinkedBlockingDeque", "putLast")
   ; ("LinkedBlockingQueue", "offer")
   ; ("LinkedBlockingQueue", "offer")
   ; ("LinkedBlockingQueue", "remove")
   ; ("LinkedBlockingQueue", "drainTo")
   ; ("LinkedBlockingQueue", "clear")
   ; ("LinkedBlockingQueue", "put")
   ; ("LinkedList", "add")
   ; ("LinkedList", "addAll")
   ; ("LinkedList", "offer")
   ; ("LinkedList", "offerFirst")
   ; ("LinkedList", "offerLast")
   ; ("LinkedList", "remove")
   ; ("LinkedList", "removeFirstOccurrence")
   ; ("LinkedList", "removeLastOccurrence")
   ; ("LinkedList", "add")
   ; ("LinkedList", "addFirst")
   ; ("LinkedList", "addLast")
   ; ("LinkedList", "clear")
   ; ("LinkedList", "push")
   ; ("LinkedTransferQueue", "add")
   ; ("LinkedTransferQueue", "offer")
   ; ("LinkedTransferQueue", "remove")
   ; ("LinkedTransferQueue", "drainTo")
   ; ("LinkedTransferQueue", "put")
   ; ("LinkedTransferQueue", "transfer")
   ; ("PriorityBlockingQueue", "add")
   ; ("PriorityBlockingQueue", "offer")
   ; ("PriorityBlockingQueue", "remove")
   ; ("PriorityBlockingQueue", "drainTo")
   ; ("PriorityBlockingQueue", "clear")
   ; ("PriorityBlockingQueue", "put")
   ; ("PriorityQueue", "add")
   ; ("PriorityQueue", "offer")
   ; ("PriorityQueue", "remove")
   ; ("PriorityQueue", "clear")
   ; ("RoleList", "add")
   ; ("RoleList", "addAll")
   ; ("RoleList", "add")
   ; ("RoleList", "set")
   ; ("RoleUnresolvedList", "add")
   ; ("RoleUnresolvedList", "addAll")
   ; ("RoleUnresolvedList", "add")
   ; ("RoleUnresolvedList", "set")
   ; ("SynchronousQueue", "offer")
   ; ("SynchronousQueue", "remove")
   ; ("SynchronousQueue", "removeAll")
   ; ("SynchronousQueue", "retainAll")
   ; ("SynchronousQueue", "drainTo")
   ; ("SynchronousQueue", "drainTo")
   ; ("SynchronousQueue", "clear")
   ; ("SynchronousQueue", "put")
   ; ("TreeSet", "add")
   ; ("TreeSet", "addAll")
   ; ("TreeSet", "remove")
   ; ("TreeSet", "clear")
   ; ("Set", "add")
   ; ("Set", "addAll")
   ; ("Set", "remove")
   ; ("Set", "removeAll")
   ; ("Set", "retainAll")
   ; ("Set", "clear")
   ; ("Set", "contains")
   ; ("List", "add")
   ; ("List", "addAll")
   ; ("List", "addAll")
   ; ("List", "remove")
   ; ("List", "removeAll")
   ; ("List", "retainAll")
   ; ("List", "replaceAll")
   ; ("List", "sort")
   ; ("List", "add")
   ; ("List", "clear")
   ; ("List", "contains")
   ; ("List", "get")
   ; ("List", "isEmpty")
   ; ("List", "set")
   ; ("List", "size")
   ; ("List", "toArray")
   ; ("Map", "put")
   ; ("Map", "replace")
   ; ("Map", "remove")
   ; ("Map", "replace")
   ; ("Map", "forEach")
   ; ("Map", "replaceAll")
   ; ("Map", "clear")
   ; ("Map", "putAll")
   ; ("Map", "contains")
   ; ("Map", "get")
   ; ("HashSet", "add")
   ; ("HashSet", "remove")
   ; ("HashSet", "clear")
   ; ("TreeSet", "add")
   ; ("TreeSet", "addAll")
   ; ("TreeSet", "remove")
   ; ("TreeSet", "clear")
   ; ("ArrayList", "add")
   ; ("ArrayList", "addAll")
   ; ("ArrayList", "remove")
   ; ("ArrayList", "removeAll")
   ; ("ArrayList", "removeIf")
   ; ("ArrayList", "retainAll")
   ; ("ArrayList", "removeRange")
   ; ("ArrayList", "add")
   ; ("ArrayList", "clear")
   ; ("ArrayList", "ensureCapacity")
   ; ("ArrayList", "forEach")
   ; ("ArrayList", "replaceAll")
   ; ("ArrayList", "sort")
   ; ("ArrayList", "trimToSize")
   ; ("LinkedList", "add")
   ; ("LinkedList", "addAll")
   ; ("LinkedList", "offer")
   ; ("LinkedList", "offerFirst")
   ; ("LinkedList", "offerLast")
   ; ("LinkedList", "remove")
   ; ("LinkedList", "removeFirstOccurrence")
   ; ("LinkedList", "removeLastOccurrence")
   ; ("LinkedList", "add")
   ; ("LinkedList", "addFirst")
   ; ("LinkedList", "addLast")
   ; ("LinkedList", "clear")
   ; ("LinkedList", "push")
   ; ("Vector", "add")
   ; ("Vector", "addAll")
   ; ("Vector", "remove")
   ; ("Vector", "removeAll")
   ; ("Vector", "removeElement")
   ; ("Vector", "removeIf")
   ; ("Vector", "retainAll")
   ; ("Vector", "removeRange")
   ; ("Vector", "add")
   ; ("Vector", "addElement")
   ; ("Vector", "clear")
   ; ("Vector", "copyInto")
   ; ("Vector", "ensureCapacity")
   ; ("Vector", "forEach")
   ; ("Vector", "insertElementAt")
   ; ("Vector", "removeAllElements")
   ; ("Vector", "removeElementAt")
   ; ("Vector", "replaceAll")
   ; ("Vector", "setElementAt")
   ; ("Vector", "setSize")
   ; ("Vector", "sort")
   ; ("Vector", "trimToSize")
   ; ("Collections", "sort")
   ; ("Collections", "copy")
   ; ("Collections", "fill")
   ; ("Collections", "sort")
   ; ("Collections", "reverse")
   ; ("Collections", "rotate")
   ; ("Collections", "shuffle")
   ; ("Collections", "swap")
   ; ("Collections", "emptyList")
   ; ("Collections", "emptySet")
   ; ("Arrays", "parallelPrefix")
   ; ("Arrays", "parallelSetAll")
   ; ("Arrays", "parallelSort")
   ; ("Arrays", "setAll")
   ; ("Arrays", "sort")
   ; ("Arrays", "sort")
   ; ("Arrays", "fill")
   ; ("Arrays", "parallelPrefix")
   ; ("Arrays", "parallelSetAll")
   ; ("Arrays", "parallelSort")
   ; ("Arrays", "setAll")
   ; ("Arrays", "sort")
   ; ("AbstractCollection", "add")
   ; ("AbstractCollection", "addAll")
   ; ("AbstractCollection", "remove")
   ; ("AbstractCollection", "removeAll")
   ; ("AbstractCollection", "retainAll")
   ; ("AbstractCollection", "clear") |]


let java_none_methods_etc =
  [| ("BiConsumer", "accept")
   ; ("Throwable", "addSuppressed")
   ; ("Date", "after")
   ; ("Stream", "anyMatch")
   ; ("StringBuilder", "append")
   ; ("Matcher", "appendReplacement")
   ; ("Matcher", "appendTail")
   ; ("Function", "apply")
   ; ("Arrays", "asList")
   ; ("Instant", "atZone")
   ; ("String", "charAt")
   ; ("Object", "clone")
   ; ("FileOutputStream", "close")
   ; ("InputStream", "close")
   ; ("ZipFile", "close")
   ; ("Stream", "collect")
   ; ("Long", "compareTo")
   ; ("String", "compareTo")
   ; ("Comparator", "comparingInt")
   ; ("Pattern", "compile")
   ; ("String", "concat")
   ; ("String", "contains")
   ; ("URI", "create")
   ; ("Font", "createFont")
   ; ("Base64$Decoder", "decode")
   ; ("Font", "deriveFont")
   ; ("Optional", "empty")
   ; ("Base64$Encoder", "encodeToString")
   ; ("String", "endsWith")
   ; ("ZipFile", "entries")
   ; ("Enum", "equals")
   ; ("LocalDate", "equals")
   ; ("Long", "equals")
   ; ("Object", "equals")
   ; ("String", "equals")
   ; ("String", "equalsIgnoreCase")
   ; ("Stream", "filter")
   ; ("Matcher", "find")
   ; ("Stream", "findFirst")
   ; ("Optional", "flatMap")
   ; ("Float", "floatValue")
   ; ("Iterable", "forEach")
   ; ("Stream", "forEach")
   ; ("Charset", "forName")
   ; ("DateFormat", "format")
   ; ("String", "format")
   ; ("String", "format")
   ; ("Optional", "get")
   ; ("Class", "getAnnotation")
   ; ("String", "getBytes")
   ; ("Object", "getClass")
   ; ("Class", "getClassLoader")
   ; ("Base64", "getDecoder")
   ; ("Base64", "getEncoder")
   ; ("Graphics", "getFontMetrics")
   ; ("BufferedImage", "getGraphics")
   ; ("ZipFile", "getInputStream")
   ; ("Throwable", "getMessage")
   ; ("Principal", "getName")
   ; ("URL", "getPath")
   ; ("Properties", "getProperty")
   ; ("ClassLoader", "getResource")
   ; ("ClassLoader", "getResourceAsStream")
   ; ("TimeZone", "getTimeZone")
   ; ("Matcher", "group")
   ; ("Collectors", "groupingBy")
   ; ("Enumeration", "hasMoreElements")
   ; ("Iterator", "hasNext")
   ; ("String", "indexOf")
   ; ("LocalDate", "isAfter")
   ; ("LocalDate", "isBefore")
   ; ("Optional", "isPresent")
   ; ("String", "join")
   ; ("String", "lastIndexOf")
   ; ("String", "length")
   ; ("Long", "longValue")
   ; ("Optional", "map")
   ; ("Stream", "map")
   ; ("Stream", "mapToInt")
   ; ("Pattern", "matcher")
   ; ("Matcher", "matches")
   ; ("String", "matches")
   ; ("IntStream", "max")
   ; ("Math", "max")
   ; ("Math", "min")
   ; ("Instant", "minus")
   ; ("Enum", "name")
   ; ("Iterator", "next")
   ; ("Enumeration", "nextElement")
   ; ("Optional", "of")
   ; ("Duration", "ofMinutes")
   ; ("URL", "openStream")
   ; ("OptionalInt", "orElse")
   ; ("Optional", "orElse")
   ; ("Enum", "ordinal")
   ; ("LocalDate", "parse")
   ; ("DateFormat", "parse")
   ; ("LocalDate", "plusDays")
   ; ("Pattern", "quote")
   ; ("Iterator", "remove")
   ; ("String", "replace")
   ; ("String", "replaceAll")
   ; ("String", "replaceFirst")
   ; ("Collections", "reverseOrder")
   ; ("Graphics", "setFont")
   ; ("DateFormat", "setTimeZone")
   ; ("Collections", "singleton")
   ; ("Collections", "singletonList")
   ; ("Collections", "singletonMap")
   ; ("Stream", "sorted")
   ; ("String", "split")
   ; ("String", "startsWith")
   ; ("Collection", "stream")
   ; ("Arrays", "stream")
   ; ("FontMetrics", "stringWidth")
   ; ("List", "subList")
   ; ("String", "substring")
   ; ("Predicate", "test")
   ; ("Stream", "toArray")
   ; ("Stream", "toArray")
   ; ("String", "toCharArray")
   ; ("Date", "toInstant")
   ; ("Collectors", "toList")
   ; ("ZonedDateTime", "toLocalDate")
   ; ("String", "toLowerCase")
   ; ("Enum", "toString")
   ; ("LocalDate", "toString")
   ; ("Long", "toString")
   ; ("Object", "toString")
   ; ("StringBuffer", "toString")
   ; ("StringBuilder", "toString")
   ; ("StringWriter", "toString")
   ; ("URI", "toString")
   ; ("URL", "toString")
   ; ("String", "trim")
   ; ("Collections", "unmodifiableList")
   ; ("Boolean", "valueOf")
   ; ("Integer", "valueOf")
   ; ("Long", "valueOf")
   ; ("Float", "valueOf")
   ; ("Enum", "valueOf")
   ; ("Float", "valueOf")
   ; ("Long", "valueOf") |]


(* java.time.Instant.minus까지 햇당... *)

let java_source_methods =
  [| ("File", "createTempFile")
   ; ("System", "currentTimeMillis")
   ; ("File", "exists")
   ; ("File", "getAbsolutePath")
   ; ("File", "getName")
   ; ("ZipFile", "getName")
   ; ("File", "getParent")
   ; ("System", "getProperty")
   ; ("File", "isDirectory")
   ; ("ZipEntry", "isDirectory")
   ; ("File", "isFile")
   ; ("File", "listFiles")
   ; ("File", "mkdir")
   ; ("LocalDate", "now")
   ; ("ZoneId", "systemDefault") |]


let java_sanitizer_methods =
  [|("Long", "hashCode"); ("Object", "hashCode"); ("String", "hashCode"); ("Objects", "hash")|]


let java_sink_methods =
  [| ("File", "deleteOnExit")
   ; ("Graphics", "dispose")
   ; ("System", "setProperty")
   ; ("FileOutputStream", "write") |]


let java_source_methods = Array.concat [java_source_methods]

let java_sink_methods = Array.concat [java_sink_methods]

let java_sanitizer_methods = Array.concat [java_sanitizer_methods]

let java_none_methods = Array.concat [java_none_methods_datastructure; java_none_methods_etc]

let all_well_known_methods =
  Array.concat [java_source_methods; java_sink_methods; java_sanitizer_methods; java_none_methods]


let stringpair_equal (s11, s12) (s21, s22) = String.equal s11 s21 && String.equal s12 s22

